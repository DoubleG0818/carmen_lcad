/*               -*- mode: c++ -*-

   DO NOT EDIT THIS FILE -- CHANGES WILL BE LOST!

   [Wed Dec 12 08:59:34 BRST 2012] This file was automatically generated by
   applying the script "./devscripts/extract_templates.tcl" to the template
   declarations in source file "src/SpaceVariant/SpaceVariantModule.H" for
   types [byte, float]
*/
#ifndef INST_CLASS
#  define INST_CLASS
#endif
#ifdef INST_NAMESPACE
namespace INST_NAMESPACE {
#endif
template ImageSet<byte> INST_CLASS getScaleSpace(const Image<byte>& inp, const float& maxrf );
template ImageSet< PixRGB<byte> > INST_CLASS getScaleSpace(const Image< PixRGB<byte> >& inp, const float& maxrf );
template ImageSet<float> INST_CLASS getScaleSpace(const Image<float>& inp, const float& maxrf );
template ImageSet< PixRGB<float> > INST_CLASS getScaleSpace(const Image< PixRGB<float> >& inp, const float& maxrf );
template Image<byte> INST_CLASS transform(const Image<byte>& image, const ImageSet< promote_trait<byte, float>::TP>* const pyr_cache );
template Image< PixRGB<byte> > INST_CLASS transform(const Image< PixRGB<byte> >& image, const ImageSet< promote_trait< PixRGB<byte> , float>::TP>* const pyr_cache );
template Image<float> INST_CLASS transform(const Image<float>& image, const ImageSet< promote_trait<float, float>::TP>* const pyr_cache );
template Image< PixRGB<float> > INST_CLASS transform(const Image< PixRGB<float> >& image, const ImageSet< promote_trait< PixRGB<float> , float>::TP>* const pyr_cache );
template void INST_CLASS transformPyramid(const Image<byte>& image, ImageSet< promote_trait<byte, float>::TP>& pyramid, const SVChanLevels& levels, const ImageSet< promote_trait<byte, float>::TP>* const pyr_cache );
template void INST_CLASS transformPyramid(const Image< PixRGB<byte> >& image, ImageSet< promote_trait< PixRGB<byte> , float>::TP>& pyramid, const SVChanLevels& levels, const ImageSet< promote_trait< PixRGB<byte> , float>::TP>* const pyr_cache );
template void INST_CLASS transformPyramid(const Image<float>& image, ImageSet< promote_trait<float, float>::TP>& pyramid, const SVChanLevels& levels, const ImageSet< promote_trait<float, float>::TP>* const pyr_cache );
template void INST_CLASS transformPyramid(const Image< PixRGB<float> >& image, ImageSet< promote_trait< PixRGB<float> , float>::TP>& pyramid, const SVChanLevels& levels, const ImageSet< promote_trait< PixRGB<float> , float>::TP>* const pyr_cache );
template Image<byte> INST_CLASS transform(const Image<byte>& image, const Point2D<int>& fovea, const ImageSet< promote_trait<byte, float>::TP>* const pyr_cache );
template Image< PixRGB<byte> > INST_CLASS transform(const Image< PixRGB<byte> >& image, const Point2D<int>& fovea, const ImageSet< promote_trait< PixRGB<byte> , float>::TP>* const pyr_cache );
template Image<float> INST_CLASS transform(const Image<float>& image, const Point2D<int>& fovea, const ImageSet< promote_trait<float, float>::TP>* const pyr_cache );
template Image< PixRGB<float> > INST_CLASS transform(const Image< PixRGB<float> >& image, const Point2D<int>& fovea, const ImageSet< promote_trait< PixRGB<float> , float>::TP>* const pyr_cache );
template Image<byte> INST_CLASS cropTransform(const Image<byte>& image, const Point2D<int>& fovea, const Dims& dims, const ImageSet< promote_trait<byte, float>::TP>* const pyr_cache );
template Image< PixRGB<byte> > INST_CLASS cropTransform(const Image< PixRGB<byte> >& image, const Point2D<int>& fovea, const Dims& dims, const ImageSet< promote_trait< PixRGB<byte> , float>::TP>* const pyr_cache );
template Image<float> INST_CLASS cropTransform(const Image<float>& image, const Point2D<int>& fovea, const Dims& dims, const ImageSet< promote_trait<float, float>::TP>* const pyr_cache );
template Image< PixRGB<float> > INST_CLASS cropTransform(const Image< PixRGB<float> >& image, const Point2D<int>& fovea, const Dims& dims, const ImageSet< promote_trait< PixRGB<float> , float>::TP>* const pyr_cache );
template Image<byte> INST_CLASS inverseTransform(const Image<byte>& ret_image) const;
template Image< PixRGB<byte> > INST_CLASS inverseTransform(const Image< PixRGB<byte> >& ret_image) const;
template Image<float> INST_CLASS inverseTransform(const Image<float>& ret_image) const;
template Image< PixRGB<float> > INST_CLASS inverseTransform(const Image< PixRGB<float> >& ret_image) const;
template Image<byte> INST_CLASS inverseMap(const Image<byte>& map_image) const;
template Image< PixRGB<byte> > INST_CLASS inverseMap(const Image< PixRGB<byte> >& map_image) const;
template Image<float> INST_CLASS inverseMap(const Image<float>& map_image) const;
template Image< PixRGB<float> > INST_CLASS inverseMap(const Image< PixRGB<float> >& map_image) const;
#ifdef INST_NAMESPACE
}
#endif
