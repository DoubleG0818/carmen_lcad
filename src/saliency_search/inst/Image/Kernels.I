/*               -*- mode: c++ -*-

   DO NOT EDIT THIS FILE -- CHANGES WILL BE LOST!

   [Wed Dec 12 08:54:39 BRST 2012] This file was automatically generated by
   applying the script "./devscripts/extract_templates.tcl" to the template
   declarations in source file "src/Image/Kernels.H" for types [byte, float]
*/
#ifndef INST_CLASS
#  define INST_CLASS
#endif
#ifdef INST_NAMESPACE
namespace INST_NAMESPACE {
#endif
template Image<byte> INST_CLASS dogFilterHmax(const float theta, const float gamma, const int halfsize, const float div);
template Image<float> INST_CLASS dogFilterHmax(const float theta, const float gamma, const int halfsize, const float div);
template Image<byte> INST_CLASS dogFilter(const float stddev, const float theta, const int halfsize );
template Image<float> INST_CLASS dogFilter(const float stddev, const float theta, const int halfsize );
template Image<byte> INST_CLASS dogFilter(const float stddev, const int halfsize );
template Image<float> INST_CLASS dogFilter(const float stddev, const int halfsize );
template Image<byte> INST_CLASS dogFilterHmax(const float stddev, const float theta, const int cBegin, const int cEnd);
template Image<float> INST_CLASS dogFilterHmax(const float stddev, const float theta, const int cBegin, const int cEnd);
template Image<byte> INST_CLASS gaborFilter(const float stddev, const float period, const float phase, const float theta, const float , const float ampl );
template Image<float> INST_CLASS gaborFilter(const float stddev, const float period, const float phase, const float theta, const float , const float ampl );
template Image<byte> INST_CLASS gaborFilter(const float scale, const float theta);
template Image<float> INST_CLASS gaborFilter(const float scale, const float theta);
template Image<byte> INST_CLASS gaborFilter2(const float stddev, const float period, const float phase, const float theta, const float sigMod , const float amplitude );
template Image<float> INST_CLASS gaborFilter2(const float stddev, const float period, const float phase, const float theta, const float sigMod , const float amplitude );
template Image<byte> INST_CLASS gaussian2D(const float stddev, const float sigMod , const float amplitude );
template Image<float> INST_CLASS gaussian2D(const float stddev, const float sigMod , const float amplitude );
template Image<byte> INST_CLASS gaussianBlob(const Dims& dims, const Point2D<int>& center, const float sigmaX, const float sigmaY);
template Image<float> INST_CLASS gaussianBlob(const Dims& dims, const Point2D<int>& center, const float sigmaX, const float sigmaY);
template Image<byte> INST_CLASS gaussianBlobUnnormalized(const Dims& dims, const Point2D<int>& center, const float sigmaX, const float sigmaY);
template Image<float> INST_CLASS gaussianBlobUnnormalized(const Dims& dims, const Point2D<int>& center, const float sigmaX, const float sigmaY);
template Image<byte> INST_CLASS grating(const int width, const int height, const float period, const float phase, const float theta);
template Image<float> INST_CLASS grating(const int width, const int height, const float period, const float phase, const float theta);
template Image<byte> INST_CLASS gaussian(const float coeff, const float sigma, const int maxhw, const float threshperc );
template Image<float> INST_CLASS gaussian(const float coeff, const float sigma, const int maxhw, const float threshperc );
template Image<byte> INST_CLASS longRangeExcFilter(const float factor, const float orient);
template Image<float> INST_CLASS longRangeExcFilter(const float factor, const float orient);
template Image<byte> INST_CLASS fixationMask(const Dims& dims, const Point2D<int>& fixation, const float pixperdeg, const byte maxval, const float sigma );
template Image<float> INST_CLASS fixationMask(const Dims& dims, const Point2D<int>& fixation, const float pixperdeg, const float maxval, const float sigma );
template Image<byte> INST_CLASS fixationMask(const Image<byte>& mask, const Point2D<int>& fixation, const float pixperdeg, const byte maxval, const float sigma );
template Image<float> INST_CLASS fixationMask(const Image<float>& mask, const Point2D<int>& fixation, const float pixperdeg, const float maxval, const float sigma );
#ifdef INST_NAMESPACE
}
#endif
