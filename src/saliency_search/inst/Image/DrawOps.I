/*               -*- mode: c++ -*-

   DO NOT EDIT THIS FILE -- CHANGES WILL BE LOST!

   [Wed Dec 12 08:54:20 BRST 2012] This file was automatically generated by
   applying the script "./devscripts/extract_templates.tcl" to the template
   declarations in source file "src/Image/DrawOps.H" for types [byte, float]
*/
#ifndef INST_CLASS
#  define INST_CLASS
#endif
#ifdef INST_NAMESPACE
namespace INST_NAMESPACE {
#endif
template void INST_CLASS drawDisk(Image<byte>& dst, const Point2D<int>& center, const int radius, const byte value, const float alpha );
template void INST_CLASS drawDisk(Image< PixRGB<byte> >& dst, const Point2D<int>& center, const int radius, const  PixRGB<byte>  value, const float alpha );
template void INST_CLASS drawDisk(Image<float>& dst, const Point2D<int>& center, const int radius, const float value, const float alpha );
template void INST_CLASS drawDisk(Image< PixRGB<float> >& dst, const Point2D<int>& center, const int radius, const  PixRGB<float>  value, const float alpha );
template void INST_CLASS drawHalfDisk(Image<byte>& dst, const Point2D<int>& center, const int radius, const byte value, float ori );
template void INST_CLASS drawHalfDisk(Image< PixRGB<byte> >& dst, const Point2D<int>& center, const int radius, const  PixRGB<byte>  value, float ori );
template void INST_CLASS drawHalfDisk(Image<float>& dst, const Point2D<int>& center, const int radius, const float value, float ori );
template void INST_CLASS drawHalfDisk(Image< PixRGB<float> >& dst, const Point2D<int>& center, const int radius, const  PixRGB<float>  value, float ori );
template void INST_CLASS drawLine(Image<byte>& dst, const Point2D<int>& p1, const Point2D<int>& p2, const byte col, const int rad , const float alpha );
template void INST_CLASS drawLine(Image< PixRGB<byte> >& dst, const Point2D<int>& p1, const Point2D<int>& p2, const  PixRGB<byte>  col, const int rad , const float alpha );
template void INST_CLASS drawLine(Image<float>& dst, const Point2D<int>& p1, const Point2D<int>& p2, const float col, const int rad , const float alpha );
template void INST_CLASS drawLine(Image< PixRGB<float> >& dst, const Point2D<int>& p1, const Point2D<int>& p2, const  PixRGB<float>  col, const int rad , const float alpha );
template void INST_CLASS drawLine(Image<byte>& dst, const Point2D<int>& pos, float ori, float len, const byte col, const int rad );
template void INST_CLASS drawLine(Image< PixRGB<byte> >& dst, const Point2D<int>& pos, float ori, float len, const  PixRGB<byte>  col, const int rad );
template void INST_CLASS drawLine(Image<float>& dst, const Point2D<int>& pos, float ori, float len, const float col, const int rad );
template void INST_CLASS drawLine(Image< PixRGB<float> >& dst, const Point2D<int>& pos, float ori, float len, const  PixRGB<float>  col, const int rad );
template void INST_CLASS drawCorner(Image<byte>& dst, const Point2D<int>& pos, float ori, float ang, float len, const byte col, const int rad );
template void INST_CLASS drawCorner(Image< PixRGB<byte> >& dst, const Point2D<int>& pos, float ori, float ang, float len, const  PixRGB<byte>  col, const int rad );
template void INST_CLASS drawCorner(Image<float>& dst, const Point2D<int>& pos, float ori, float ang, float len, const float col, const int rad );
template void INST_CLASS drawCorner(Image< PixRGB<float> >& dst, const Point2D<int>& pos, float ori, float ang, float len, const  PixRGB<float>  col, const int rad );
template void INST_CLASS drawRect(Image<byte>& dst, const Rectangle& rect, const byte col, const int rad );
template void INST_CLASS drawRect(Image< PixRGB<byte> >& dst, const Rectangle& rect, const  PixRGB<byte>  col, const int rad );
template void INST_CLASS drawRect(Image<float>& dst, const Rectangle& rect, const float col, const int rad );
template void INST_CLASS drawRect(Image< PixRGB<float> >& dst, const Rectangle& rect, const  PixRGB<float>  col, const int rad );
template void INST_CLASS drawRectSquareCorners(Image<byte>& dst, const Rectangle &r, const byte color, const int linewidth);
template void INST_CLASS drawRectSquareCorners(Image< PixRGB<byte> >& dst, const Rectangle &r, const  PixRGB<byte>  color, const int linewidth);
template void INST_CLASS drawRectSquareCorners(Image<float>& dst, const Rectangle &r, const float color, const int linewidth);
template void INST_CLASS drawRectSquareCorners(Image< PixRGB<float> >& dst, const Rectangle &r, const  PixRGB<float>  color, const int linewidth);
template void INST_CLASS drawRectOR(Image<byte>& dst, const Rectangle& rect, const byte col, const int rad , const float ori );
template void INST_CLASS drawRectOR(Image< PixRGB<byte> >& dst, const Rectangle& rect, const  PixRGB<byte>  col, const int rad , const float ori );
template void INST_CLASS drawRectOR(Image<float>& dst, const Rectangle& rect, const float col, const int rad , const float ori );
template void INST_CLASS drawRectOR(Image< PixRGB<float> >& dst, const Rectangle& rect, const  PixRGB<float>  col, const int rad , const float ori );
template void INST_CLASS drawRectEZ(Image<byte>& dst, const Rectangle& rect, const byte col, const int rad );
template void INST_CLASS drawRectEZ(Image< PixRGB<byte> >& dst, const Rectangle& rect, const  PixRGB<byte>  col, const int rad );
template void INST_CLASS drawRectEZ(Image<float>& dst, const Rectangle& rect, const float col, const int rad );
template void INST_CLASS drawRectEZ(Image< PixRGB<float> >& dst, const Rectangle& rect, const  PixRGB<float>  col, const int rad );
template void INST_CLASS drawFilledRect(Image<byte>& dst, const Rectangle& rect, const byte fillVal);
template void INST_CLASS drawFilledRect(Image< PixRGB<byte> >& dst, const Rectangle& rect, const  PixRGB<byte>  fillVal);
template void INST_CLASS drawFilledRect(Image<float>& dst, const Rectangle& rect, const float fillVal);
template void INST_CLASS drawFilledRect(Image< PixRGB<float> >& dst, const Rectangle& rect, const  PixRGB<float>  fillVal);
template void INST_CLASS drawCross(Image<byte>& dst, const Point2D<int>& p, const byte col, const int siz , const int rad );
template void INST_CLASS drawCross(Image< PixRGB<byte> >& dst, const Point2D<int>& p, const  PixRGB<byte>  col, const int siz , const int rad );
template void INST_CLASS drawCross(Image<float>& dst, const Point2D<int>& p, const float col, const int siz , const int rad );
template void INST_CLASS drawCross(Image< PixRGB<float> >& dst, const Point2D<int>& p, const  PixRGB<float>  col, const int siz , const int rad );
template void INST_CLASS drawCrossOR(Image<byte>& dst, const Point2D<int>& p, const byte col, const int siz , const int rad , const float ori );
template void INST_CLASS drawCrossOR(Image< PixRGB<byte> >& dst, const Point2D<int>& p, const  PixRGB<byte>  col, const int siz , const int rad , const float ori );
template void INST_CLASS drawCrossOR(Image<float>& dst, const Point2D<int>& p, const float col, const int siz , const int rad , const float ori );
template void INST_CLASS drawCrossOR(Image< PixRGB<float> >& dst, const Point2D<int>& p, const  PixRGB<float>  col, const int siz , const int rad , const float ori );
template void INST_CLASS drawPatch(Image<byte>& dst, const Point2D<int>& p, const int siz, const byte col);
template void INST_CLASS drawPatch(Image< PixRGB<byte> >& dst, const Point2D<int>& p, const int siz, const  PixRGB<byte>  col);
template void INST_CLASS drawPatch(Image<float>& dst, const Point2D<int>& p, const int siz, const float col);
template void INST_CLASS drawPatch(Image< PixRGB<float> >& dst, const Point2D<int>& p, const int siz, const  PixRGB<float>  col);
template void INST_CLASS drawPatchBB(Image<byte>& dst, const Point2D<int>& p, const int siz, const byte col, const byte bgcol );
template void INST_CLASS drawPatchBB(Image< PixRGB<byte> >& dst, const Point2D<int>& p, const int siz, const  PixRGB<byte>  col, const  PixRGB<byte>  bgcol );
template void INST_CLASS drawPatchBB(Image<float>& dst, const Point2D<int>& p, const int siz, const float col, const float bgcol );
template void INST_CLASS drawPatchBB(Image< PixRGB<float> >& dst, const Point2D<int>& p, const int siz, const  PixRGB<float>  col, const  PixRGB<float>  bgcol );
template void INST_CLASS drawCircle(Image<byte>& dst, const Point2D<int>& p, const int radius, const byte col, const int rad );
template void INST_CLASS drawCircle(Image< PixRGB<byte> >& dst, const Point2D<int>& p, const int radius, const  PixRGB<byte>  col, const int rad );
template void INST_CLASS drawCircle(Image<float>& dst, const Point2D<int>& p, const int radius, const float col, const int rad );
template void INST_CLASS drawCircle(Image< PixRGB<float> >& dst, const Point2D<int>& p, const int radius, const  PixRGB<float>  col, const int rad );
template void INST_CLASS drawArc(Image<byte>& dst, const Point2D<int>& center, const int radius, const byte col, const float startAng ,const float endAng , const int rad );
template void INST_CLASS drawArc(Image< PixRGB<byte> >& dst, const Point2D<int>& center, const int radius, const  PixRGB<byte>  col, const float startAng ,const float endAng , const int rad );
template void INST_CLASS drawArc(Image<float>& dst, const Point2D<int>& center, const int radius, const float col, const float startAng ,const float endAng , const int rad );
template void INST_CLASS drawArc(Image< PixRGB<float> >& dst, const Point2D<int>& center, const int radius, const  PixRGB<float>  col, const float startAng ,const float endAng , const int rad );
template void INST_CLASS drawEllipse(Image<byte>& dst, const Point2D<int>& p, const int radiusx, const int radiusy, const byte col, const int rad );
template void INST_CLASS drawEllipse(Image< PixRGB<byte> >& dst, const Point2D<int>& p, const int radiusx, const int radiusy, const  PixRGB<byte>  col, const int rad );
template void INST_CLASS drawEllipse(Image<float>& dst, const Point2D<int>& p, const int radiusx, const int radiusy, const float col, const int rad );
template void INST_CLASS drawEllipse(Image< PixRGB<float> >& dst, const Point2D<int>& p, const int radiusx, const int radiusy, const  PixRGB<float>  col, const int rad );
template void INST_CLASS drawArrow(Image<byte>& dst, const Point2D<int>& p1, const Point2D<int>& p2, const byte col, const int rad , const int len );
template void INST_CLASS drawArrow(Image< PixRGB<byte> >& dst, const Point2D<int>& p1, const Point2D<int>& p2, const  PixRGB<byte>  col, const int rad , const int len );
template void INST_CLASS drawArrow(Image<float>& dst, const Point2D<int>& p1, const Point2D<int>& p2, const float col, const int rad , const int len );
template void INST_CLASS drawArrow(Image< PixRGB<float> >& dst, const Point2D<int>& p1, const Point2D<int>& p2, const  PixRGB<float>  col, const int rad , const int len );
template void INST_CLASS drawGrid(Image<byte>& dst, const int spacingX, const int spacingY, const int thickX, const int thickY, const byte col);
template void INST_CLASS drawGrid(Image< PixRGB<byte> >& dst, const int spacingX, const int spacingY, const int thickX, const int thickY, const  PixRGB<byte>  col);
template void INST_CLASS drawGrid(Image<float>& dst, const int spacingX, const int spacingY, const int thickX, const int thickY, const float col);
template void INST_CLASS drawGrid(Image< PixRGB<float> >& dst, const int spacingX, const int spacingY, const int thickX, const int thickY, const  PixRGB<float>  col);
template void INST_CLASS drawGrid(Image<byte>& dst, const uint nx, const uint ny, const int thick, const byte col);
template void INST_CLASS drawGrid(Image< PixRGB<byte> >& dst, const uint nx, const uint ny, const int thick, const  PixRGB<byte>  col);
template void INST_CLASS drawGrid(Image<float>& dst, const uint nx, const uint ny, const int thick, const float col);
template void INST_CLASS drawGrid(Image< PixRGB<float> >& dst, const uint nx, const uint ny, const int thick, const  PixRGB<float>  col);
template void INST_CLASS drawSuperquadric(Image<byte>& dst, const Point2D<int>& p, const float a, const float b, const float e, const byte col, const float rot , const float k1 , const float k2 , const float thetai , const float thetaf , const int rad , const int nSeg );
template void INST_CLASS drawSuperquadric(Image< PixRGB<byte> >& dst, const Point2D<int>& p, const float a, const float b, const float e, const  PixRGB<byte>  col, const float rot , const float k1 , const float k2 , const float thetai , const float thetaf , const int rad , const int nSeg );
template void INST_CLASS drawSuperquadric(Image<float>& dst, const Point2D<int>& p, const float a, const float b, const float e, const float col, const float rot , const float k1 , const float k2 , const float thetai , const float thetaf , const int rad , const int nSeg );
template void INST_CLASS drawSuperquadric(Image< PixRGB<float> >& dst, const Point2D<int>& p, const float a, const float b, const float e, const  PixRGB<float>  col, const float rot , const float k1 , const float k2 , const float thetai , const float thetaf , const int rad , const int nSeg );
template void INST_CLASS writeText(Image<byte>& dst, const Point2D<int>& pt, const char* text, const byte col , const byte bgcol , const SimpleFont& f , const bool transparent_bg , const TextAnchor anchor );
template void INST_CLASS writeText(Image< PixRGB<byte> >& dst, const Point2D<int>& pt, const char* text, const  PixRGB<byte>  col , const  PixRGB<byte>  bgcol , const SimpleFont& f , const bool transparent_bg , const TextAnchor anchor );
template void INST_CLASS writeText(Image<float>& dst, const Point2D<int>& pt, const char* text, const float col , const float bgcol , const SimpleFont& f , const bool transparent_bg , const TextAnchor anchor );
template void INST_CLASS writeText(Image< PixRGB<float> >& dst, const Point2D<int>& pt, const char* text, const  PixRGB<float>  col , const  PixRGB<float>  bgcol , const SimpleFont& f , const bool transparent_bg , const TextAnchor anchor );
template Image<byte> INST_CLASS makeMultilineTextBox(const int w, const std::string* lines, const size_t nlines, const byte col, const byte bg , const size_t max_chars_per_line , const int fontwidth );
template Image< PixRGB<byte> > INST_CLASS makeMultilineTextBox(const int w, const std::string* lines, const size_t nlines, const  PixRGB<byte>  col, const  PixRGB<byte>  bg , const size_t max_chars_per_line , const int fontwidth );
template Image<float> INST_CLASS makeMultilineTextBox(const int w, const std::string* lines, const size_t nlines, const float col, const float bg , const size_t max_chars_per_line , const int fontwidth );
template Image< PixRGB<float> > INST_CLASS makeMultilineTextBox(const int w, const std::string* lines, const size_t nlines, const  PixRGB<float>  col, const  PixRGB<float>  bg , const size_t max_chars_per_line , const int fontwidth );
template void INST_CLASS drawPoint(Image<byte>& dst, int X,int Y, byte pix);
template void INST_CLASS drawPoint(Image< PixRGB<byte> >& dst, int X,int Y,  PixRGB<byte>  pix);
template void INST_CLASS drawPoint(Image<float>& dst, int X,int Y, float pix);
template void INST_CLASS drawPoint(Image< PixRGB<float> >& dst, int X,int Y,  PixRGB<float>  pix);
template void INST_CLASS drawStar(Image<byte>& dst, const Point2D<int>& p, const byte col, const int siz , const int rad );
template void INST_CLASS drawStar(Image< PixRGB<byte> >& dst, const Point2D<int>& p, const  PixRGB<byte>  col, const int siz , const int rad );
template void INST_CLASS drawStar(Image<float>& dst, const Point2D<int>& p, const float col, const int siz , const int rad );
template void INST_CLASS drawStar(Image< PixRGB<float> >& dst, const Point2D<int>& p, const  PixRGB<float>  col, const int siz , const int rad );
template void INST_CLASS drawStar2(Image<byte>& dst, const Point2D<int>& p, const byte col, const int siz , const int rad );
template void INST_CLASS drawStar2(Image< PixRGB<byte> >& dst, const Point2D<int>& p, const  PixRGB<byte>  col, const int siz , const int rad );
template void INST_CLASS drawStar2(Image<float>& dst, const Point2D<int>& p, const float col, const int siz , const int rad );
template void INST_CLASS drawStar2(Image< PixRGB<float> >& dst, const Point2D<int>& p, const  PixRGB<float>  col, const int siz , const int rad );
template int INST_CLASS drawDiskCheckTarget(Image<byte>& dst, Image<byte>& mask, const Point2D<int>& center, const int radius, const byte value, const byte targetval, const byte floodval);
template int INST_CLASS drawDiskCheckTarget(Image<float>& dst, Image<float>& mask, const Point2D<int>& center, const int radius, const float value, const float targetval, const float floodval);
template Image<PixRGB<byte> > INST_CLASS warp3D(const Image<PixRGB<byte> >& ima, const Image<float>& zmap, const float pitch, const float yaw, const float zMax, Dims& dims);
template Image<PixRGB<float> > INST_CLASS warp3D(const Image<PixRGB<float> >& ima, const Image<float>& zmap, const float pitch, const float yaw, const float zMax, Dims& dims);
template Image< PixRGB<byte> > INST_CLASS multilinePlot(const std::vector<std::vector<byte> >& lines, const int w, const int h, byte minVal , byte maxVal , const char *title , const char *xLabel , const char *yLabel , const std::vector<PixRGB<byte> >& linescolor , const PixRGB<byte>& gridcolor, const PixRGB<byte>& bckcolor);
template Image< PixRGB<byte> > INST_CLASS multilinePlot(const std::vector<std::vector<float> >& lines, const int w, const int h, float minVal , float maxVal , const char *title , const char *xLabel , const char *yLabel , const std::vector<PixRGB<byte> >& linescolor , const PixRGB<byte>& gridcolor, const PixRGB<byte>& bckcolor);
template void INST_CLASS drawOutlinedPolygon(Image<byte>& img, const std::vector<Point2D<int> >& polygon, const byte col, const Point2D<int> trans , const float rot , const float scale , const float k1 , const float k2 , const int rad );
template void INST_CLASS drawOutlinedPolygon(Image< PixRGB<byte> >& img, const std::vector<Point2D<int> >& polygon, const  PixRGB<byte>  col, const Point2D<int> trans , const float rot , const float scale , const float k1 , const float k2 , const int rad );
template void INST_CLASS drawOutlinedPolygon(Image<float>& img, const std::vector<Point2D<int> >& polygon, const float col, const Point2D<int> trans , const float rot , const float scale , const float k1 , const float k2 , const int rad );
template void INST_CLASS drawOutlinedPolygon(Image< PixRGB<float> >& img, const std::vector<Point2D<int> >& polygon, const  PixRGB<float>  col, const Point2D<int> trans , const float rot , const float scale , const float k1 , const float k2 , const int rad );
template void INST_CLASS drawFilledPolygon(Image<byte>& img, const std::vector<Point2D<int> >& polygon, const byte col);
template void INST_CLASS drawFilledPolygon(Image< PixRGB<byte> >& img, const std::vector<Point2D<int> >& polygon, const  PixRGB<byte>  col);
template void INST_CLASS drawFilledPolygon(Image<float>& img, const std::vector<Point2D<int> >& polygon, const float col);
template void INST_CLASS drawFilledPolygon(Image< PixRGB<float> >& img, const std::vector<Point2D<int> >& polygon, const  PixRGB<float>  col);
template Image<byte> INST_CLASS drawHistogram(std::vector<float> hist, int width, int height, byte lineVal, byte fillVal );
template Image<float> INST_CLASS drawHistogram(std::vector<float> hist, int width, int height, float lineVal, float fillVal );
#ifdef INST_NAMESPACE
}
#endif
