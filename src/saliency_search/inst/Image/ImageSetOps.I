/*               -*- mode: c++ -*-

   DO NOT EDIT THIS FILE -- CHANGES WILL BE LOST!

   [Wed Dec 12 08:54:33 BRST 2012] This file was automatically generated by
   applying the script "./devscripts/extract_templates.tcl" to the template
   declarations in source file "src/Image/ImageSetOps.H" for types [byte,
   float]
*/
#ifndef INST_CLASS
#  define INST_CLASS
#endif
#ifdef INST_NAMESPACE
namespace INST_NAMESPACE {
#endif
template bool INST_CLASS isHomogeneous(const ImageSet<byte>& x);
template bool INST_CLASS isHomogeneous(const ImageSet< PixRGB<byte> >& x);
template bool INST_CLASS isHomogeneous(const ImageSet<float>& x);
template bool INST_CLASS isHomogeneous(const ImageSet< PixRGB<float> >& x);
template bool INST_CLASS isDyadic(const ImageSet<byte>& pyr);
template bool INST_CLASS isDyadic(const ImageSet< PixRGB<byte> >& pyr);
template bool INST_CLASS isDyadic(const ImageSet<float>& pyr);
template bool INST_CLASS isDyadic(const ImageSet< PixRGB<float> >& pyr);
template Image<byte> INST_CLASS sum(const ImageSet<byte>& x);
template Image<float> INST_CLASS sum(const ImageSet<float>& x);
template Image<byte> INST_CLASS mean(const ImageSet<byte>& x);
template Image<float> INST_CLASS mean(const ImageSet<float>& x);
template Range<byte> INST_CLASS rangeOf(const ImageSet<byte>& x);
template Range<float> INST_CLASS rangeOf(const ImageSet<float>& x);
template ImageSet<byte> INST_CLASS takeSlice(const ImageSet<byte>* sets, uint N, uint s);
template ImageSet<float> INST_CLASS takeSlice(const ImageSet<float>* sets, uint N, uint s);
template Image<byte> INST_CLASS makeImageArray(const ImageSet<byte>& x, int Nx , int grid_width , byte grid_color , int destX , int destY );
template Image<float> INST_CLASS makeImageArray(const ImageSet<float>& x, int Nx , int grid_width , float grid_color , int destX , int destY );
template ImageSet<byte> INST_CLASS reduce(const ImageSet<byte>& x, int octaves);
template ImageSet<float> INST_CLASS reduce(const ImageSet<float>& x, int octaves);
template ImageSet<byte> INST_CLASS rescale(const ImageSet<byte>& x, const Dims& dims);
template ImageSet<float> INST_CLASS rescale(const ImageSet<float>& x, const Dims& dims);
template ImageSet<byte>& operator-=(ImageSet<byte>& x, const Image<byte>& y);
template ImageSet<float>& operator-=(ImageSet<float>& x, const Image<float>& y);
template ImageSet<byte>& operator+=(ImageSet<byte>& x, const Image<byte>& y);
template ImageSet<float>& operator+=(ImageSet<float>& x, const Image<float>& y);
template ImageSet<byte>& operator*=(ImageSet<byte>& x, const Image<byte>& y);
template ImageSet<float>& operator*=(ImageSet<float>& x, const Image<float>& y);
template ImageSet<byte>& operator/=(ImageSet<byte>& x, const Image<byte>& y);
template ImageSet<float>& operator/=(ImageSet<float>& x, const Image<float>& y);
template ImageSet<byte>& operator-=(ImageSet<byte>& x, const byte& v);
template ImageSet<float>& operator-=(ImageSet<float>& x, const float& v);
template ImageSet<byte>& operator+=(ImageSet<byte>& x, const byte& v);
template ImageSet<float>& operator+=(ImageSet<float>& x, const float& v);
template ImageSet<byte>& operator*=(ImageSet<byte>& x, const byte& v);
template ImageSet<float>& operator*=(ImageSet<float>& x, const float& v);
template ImageSet<byte>& operator/=(ImageSet<byte>& x, const byte& v);
template ImageSet<float>& operator/=(ImageSet<float>& x, const float& v);
template ImageSet<byte> operator-(ImageSet<byte>& x, const byte& v);
template ImageSet<float> operator-(ImageSet<float>& x, const float& v);
template ImageSet<byte> operator+(ImageSet<byte>& x, const byte& v);
template ImageSet<float> operator+(ImageSet<float>& x, const float& v);
template ImageSet<byte> operator*(ImageSet<byte>& x, const byte& v);
template ImageSet<float> operator*(ImageSet<float>& x, const float& v);
template ImageSet<byte> operator/(ImageSet<byte>& x, const byte& v);
template ImageSet<float> operator/(ImageSet<float>& x, const float& v);
template ImageSet<byte>& operator-=(ImageSet<byte>& x, const ImageSet<byte>& y);
template ImageSet<float>& operator-=(ImageSet<float>& x, const ImageSet<float>& y);
template ImageSet<byte>& operator+=(ImageSet<byte>& x, const ImageSet<byte>& y);
template ImageSet<float>& operator+=(ImageSet<float>& x, const ImageSet<float>& y);
template ImageSet<byte>& operator*=(ImageSet<byte>& x, const ImageSet<byte>& y);
template ImageSet<float>& operator*=(ImageSet<float>& x, const ImageSet<float>& y);
template ImageSet<byte>& operator/=(ImageSet<byte>& x, const ImageSet<byte>& y);
template ImageSet<float>& operator/=(ImageSet<float>& x, const ImageSet<float>& y);
template ImageSet<byte> INST_CLASS clampedDiff(const ImageSet<byte>& b, const ImageSet<byte>& c);
template ImageSet<float> INST_CLASS clampedDiff(const ImageSet<float>& b, const ImageSet<float>& c);
template void INST_CLASS doRectify(ImageSet<byte>& x);
template void INST_CLASS doRectify(ImageSet<float>& x);
template void INST_CLASS doLowThresh(ImageSet<byte>& x, const byte threshold, const byte newval );
template void INST_CLASS doLowThresh(ImageSet<float>& x, const float threshold, const float newval );
template void INST_CLASS doLowThreshAbs(ImageSet<byte>& x, const byte threshold, const byte newval );
template void INST_CLASS doLowThreshAbs(ImageSet<float>& x, const float threshold, const float newval );
template void INST_CLASS doSqrt(ImageSet<byte>& x);
template void INST_CLASS doSqrt(ImageSet<float>& x);
template void INST_CLASS doSquared(ImageSet<byte>& x);
template void INST_CLASS doSquared(ImageSet<float>& x);
#ifdef INST_NAMESPACE
}
#endif
