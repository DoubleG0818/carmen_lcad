/*               -*- mode: c++ -*-

   DO NOT EDIT THIS FILE -- CHANGES WILL BE LOST!

   [Wed Dec 12 08:55:22 BRST 2012] This file was automatically generated by
   applying the script "./devscripts/extract_templates.tcl" to the template
   declarations in source file "src/Image/Transforms.H" for types [byte,
   float]
*/
#ifndef INST_CLASS
#  define INST_CLASS
#endif
#ifdef INST_NAMESPACE
namespace INST_NAMESPACE {
#endif
template Image<byte> INST_CLASS segmentObject(const Image<byte>& src, const Point2D<int>& center);
template Image<byte> INST_CLASS segmentObject(const Image<float>& src, const Point2D<int>& center);
template int INST_CLASS segmentLandmark(const Image<byte>& src, const Point2D<int>& seed, Image<byte>& target, double& activity, double& standout, float& area_percentage);
template int INST_CLASS segmentLandmark(const Image<float>& src, const Point2D<int>& seed, Image<byte>& target, double& activity, double& standout, float& area_percentage);
template Image<byte> INST_CLASS contour2D(const Image<byte>& src, const byte onval , const byte offval );
template Image<byte> INST_CLASS contour2D(const Image<float>& src, const byte onval , const byte offval );
template Image<byte> INST_CLASS chamfer34(const Image<byte>& src, const byte dmax );
template Image<float> INST_CLASS chamfer34(const Image<float>& src, const float dmax );
template Image<byte> INST_CLASS saliencyChamfer34(const Image<byte>& src, const byte dmax );
template Image<float> INST_CLASS saliencyChamfer34(const Image<float>& src, const float dmax );
template Image< promote_trait<byte, float>::TP> INST_CLASS dct(const Image<byte>& src, const int offx, const int offy, const int size);
template Image< promote_trait<float, float>::TP> INST_CLASS dct(const Image<float>& src, const int offx, const int offy, const int size);
template float INST_CLASS infoFFT(const Image<byte>& src, const float eps, const Rectangle& rect);
template float INST_CLASS infoFFT(const Image<float>& src, const float eps, const Rectangle& rect);
template Image<float> INST_CLASS infoFFT(const Image<byte>& src, const float eps);
template Image<float> INST_CLASS infoFFT(const Image<float>& src, const float eps);
template Image<byte> INST_CLASS scaleBlock(const Image<byte>& src, const Dims newDims);
template Image< PixRGB<byte> > INST_CLASS scaleBlock(const Image< PixRGB<byte> >& src, const Dims newDims);
template Image<float> INST_CLASS scaleBlock(const Image<float>& src, const Dims newDims);
template Image< PixRGB<float> > INST_CLASS scaleBlock(const Image< PixRGB<float> >& src, const Dims newDims);
template int INST_CLASS floodClean(const Image<byte>& src, Image<byte>& dest, const Point2D<int>& seed, const byte thresh, const byte val, int numdirs );
template int INST_CLASS floodClean(const Image<float>& src, Image<float>& dest, const Point2D<int>& seed, const float thresh, const float val, int numdirs );
template int INST_CLASS floodCleanBB(const Image<byte>& src, Image<byte>& dest, const Point2D<int>& seed, const byte thresh, const byte val, Rectangle& bbox);
template int INST_CLASS floodCleanBB(const Image<float>& src, Image<float>& dest, const Point2D<int>& seed, const float thresh, const float val, Rectangle& bbox);
template Image<byte> INST_CLASS segmentObjectClean(const Image<byte>& src, const Point2D<int>& seed, int numdirs );
template Image<byte> INST_CLASS segmentObjectClean(const Image<float>& src, const Point2D<int>& seed, int numdirs );
template Image<float> INST_CLASS distDegrade(const Image<byte>& src, const Point2D<int>& foa, const float area);
template Image<float> INST_CLASS distDegrade(const Image<float>& src, const Point2D<int>& foa, const float area);
template Image<byte> INST_CLASS highThresh(const Image<byte>& src, const byte thresh, const byte val);
template Image<float> INST_CLASS highThresh(const Image<float>& src, const float thresh, const float val);
template Image<byte> INST_CLASS replaceVals(const Image<byte>& src, const byte from, const byte to, const byte other);
template Image< PixRGB<byte> > INST_CLASS replaceVals(const Image< PixRGB<byte> >& src, const  PixRGB<byte>  from, const  PixRGB<byte>  to, const  PixRGB<byte>  other);
template Image<float> INST_CLASS replaceVals(const Image<float>& src, const float from, const float to, const float other);
template Image< PixRGB<float> > INST_CLASS replaceVals(const Image< PixRGB<float> >& src, const  PixRGB<float>  from, const  PixRGB<float>  to, const  PixRGB<float>  other);
template Image<byte> INST_CLASS replaceVals(const Image<byte>& src, const byte from, const byte to);
template Image< PixRGB<byte> > INST_CLASS replaceVals(const Image< PixRGB<byte> >& src, const  PixRGB<byte>  from, const  PixRGB<byte>  to);
template Image<float> INST_CLASS replaceVals(const Image<float>& src, const float from, const float to);
template Image< PixRGB<float> > INST_CLASS replaceVals(const Image< PixRGB<float> >& src, const  PixRGB<float>  from, const  PixRGB<float>  to);
template Image<byte> INST_CLASS composite(const Image<byte>& fg, const Image<byte>& bg, const byte transparent );
template Image< PixRGB<byte> > INST_CLASS composite(const Image< PixRGB<byte> >& fg, const Image< PixRGB<byte> >& bg, const  PixRGB<byte>  transparent );
template Image<float> INST_CLASS composite(const Image<float>& fg, const Image<float>& bg, const float transparent );
template Image< PixRGB<float> > INST_CLASS composite(const Image< PixRGB<float> >& fg, const Image< PixRGB<float> >& bg, const  PixRGB<float>  transparent );
template Image<byte> INST_CLASS createMask(const Image<byte>& fg, const Image<bool> mask, const byte transparent );
template Image< PixRGB<byte> > INST_CLASS createMask(const Image< PixRGB<byte> >& fg, const Image<bool> mask, const  PixRGB<byte>  transparent );
template Image<float> INST_CLASS createMask(const Image<float>& fg, const Image<bool> mask, const float transparent );
template Image< PixRGB<float> > INST_CLASS createMask(const Image< PixRGB<float> >& fg, const Image<bool> mask, const  PixRGB<float>  transparent );
template Image<byte> INST_CLASS mosaic(const Image<byte>& fg, const Image<byte>* bg, const byte* transvalues, const uint Nimages);
template Image< PixRGB<byte> > INST_CLASS mosaic(const Image< PixRGB<byte> >& fg, const Image< PixRGB<byte> >* bg, const  PixRGB<byte> * transvalues, const uint Nimages);
template Image<float> INST_CLASS mosaic(const Image<float>& fg, const Image<float>* bg, const float* transvalues, const uint Nimages);
template Image< PixRGB<float> > INST_CLASS mosaic(const Image< PixRGB<float> >& fg, const Image< PixRGB<float> >* bg, const  PixRGB<float> * transvalues, const uint Nimages);
template Image<byte> INST_CLASS alphaBlend(const Image<byte>& fg, const Image<byte>& bg, const double alpha , const byte transparent );
template Image< PixRGB<byte> > INST_CLASS alphaBlend(const Image< PixRGB<byte> >& fg, const Image< PixRGB<byte> >& bg, const double alpha , const  PixRGB<byte>  transparent );
template Image<float> INST_CLASS alphaBlend(const Image<float>& fg, const Image<float>& bg, const double alpha , const float transparent );
template Image< PixRGB<float> > INST_CLASS alphaBlend(const Image< PixRGB<float> >& fg, const Image< PixRGB<float> >& bg, const double alpha , const  PixRGB<float>  transparent );
template Image<byte> INST_CLASS makeBinary(const Image<byte>& src, const byte& threshold, const byte lowVal , const byte highVal );
template Image<byte> INST_CLASS makeBinary(const Image<float>& src, const float& threshold, const byte lowVal , const byte highVal );
template Image<byte> INST_CLASS makeBinary2(const Image<byte>& src, const byte& lowThresh, const byte& highThresh, const byte lowVal , const byte highVal );
template Image<byte> INST_CLASS makeBinary2(const Image<float>& src, const float& lowThresh, const float& highThresh, const byte lowVal , const byte highVal );
template void INST_CLASS pasteImage(Image<byte>& background, const Image<byte>& foreground, const byte& transparent, const Point2D<int> location, float opacity );
template void INST_CLASS pasteImage(Image< PixRGB<byte> >& background, const Image< PixRGB<byte> >& foreground, const  PixRGB<byte> & transparent, const Point2D<int> location, float opacity );
template void INST_CLASS pasteImage(Image<float>& background, const Image<float>& foreground, const float& transparent, const Point2D<int> location, float opacity );
template void INST_CLASS pasteImage(Image< PixRGB<float> >& background, const Image< PixRGB<float> >& foreground, const  PixRGB<float> & transparent, const Point2D<int> location, float opacity );
template void INST_CLASS inplacePasteGabor(Image<byte>& dst, const Image<byte>& gabor, const Point2D<int>& pos,const byte background);
template void INST_CLASS inplacePasteGabor(Image<float>& dst, const Image<float>& gabor, const Point2D<int>& pos,const float background);
template int INST_CLASS flood(const Image<byte>& src, Image<byte>& dest, const Point2D<int>& seed, const byte thresh, const byte val);
template int INST_CLASS flood(const Image<float>& src, Image<float>& dest, const Point2D<int>& seed, const float thresh, const float val);
template int INST_CLASS countParticles(const Image<byte>& src, const byte thresh);
template int INST_CLASS countParticles(const Image<float>& src, const float thresh);
template void INST_CLASS inplaceAddBGnoise(Image<byte>& dst, const float range);
template void INST_CLASS inplaceAddBGnoise(Image<float>& dst, const float range);
template void INST_CLASS inplaceAddBGnoise2(Image<byte>& dst, const float range);
template void INST_CLASS inplaceAddBGnoise2(Image<float>& dst, const float range);
#ifdef INST_NAMESPACE
}
#endif
