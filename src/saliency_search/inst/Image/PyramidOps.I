/*               -*- mode: c++ -*-

   DO NOT EDIT THIS FILE -- CHANGES WILL BE LOST!

   [Wed Dec 12 08:55:06 BRST 2012] This file was automatically generated by
   applying the script "./devscripts/extract_templates.tcl" to the template
   declarations in source file "src/Image/PyramidOps.H" for types [byte,
   float]
*/
#ifndef INST_CLASS
#  define INST_CLASS
#endif
#ifdef INST_NAMESPACE
namespace INST_NAMESPACE {
#endif
template byte INST_CLASS getPyrPixel(const ImageSet<byte>& pyr, const Point2D<int>& p, const uint lev);
template  PixRGB<byte>  INST_CLASS getPyrPixel(const ImageSet< PixRGB<byte> >& pyr, const Point2D<int>& p, const uint lev);
template float INST_CLASS getPyrPixel(const ImageSet<float>& pyr, const Point2D<int>& p, const uint lev);
template  PixRGB<float>  INST_CLASS getPyrPixel(const ImageSet< PixRGB<float> >& pyr, const Point2D<int>& p, const uint lev);
template byte INST_CLASS getPyrPixelNI(const ImageSet<byte>& pyr, const Point2D<int>& p, const uint lev);
template  PixRGB<byte>  INST_CLASS getPyrPixelNI(const ImageSet< PixRGB<byte> >& pyr, const Point2D<int>& p, const uint lev);
template float INST_CLASS getPyrPixelNI(const ImageSet<float>& pyr, const Point2D<int>& p, const uint lev);
template  PixRGB<float>  INST_CLASS getPyrPixelNI(const ImageSet< PixRGB<float> >& pyr, const Point2D<int>& p, const uint lev);
template byte INST_CLASS getPyrPixel(const ImageSet<byte>& pyr, const float x, const float y, const float z);
template  PixRGB<byte>  INST_CLASS getPyrPixel(const ImageSet< PixRGB<byte> >& pyr, const float x, const float y, const float z);
template float INST_CLASS getPyrPixel(const ImageSet<float>& pyr, const float x, const float y, const float z);
template  PixRGB<float>  INST_CLASS getPyrPixel(const ImageSet< PixRGB<float> >& pyr, const float x, const float y, const float z);
template ImageSet<byte> INST_CLASS buildPyrGaussian(const Image<byte>& image, int firstlevel, int depth, int filterSize);
template ImageSet< PixRGB<byte> > INST_CLASS buildPyrGaussian(const Image< PixRGB<byte> >& image, int firstlevel, int depth, int filterSize);
template ImageSet<float> INST_CLASS buildPyrGaussian(const Image<float>& image, int firstlevel, int depth, int filterSize);
template ImageSet< PixRGB<float> > INST_CLASS buildPyrGaussian(const Image< PixRGB<float> >& image, int firstlevel, int depth, int filterSize);
template ImageSet<byte> INST_CLASS buildRadialPyrGaussian(const Image<byte>& image, int firstlevel, int depth);
template ImageSet< PixRGB<byte> > INST_CLASS buildRadialPyrGaussian(const Image< PixRGB<byte> >& image, int firstlevel, int depth);
template ImageSet<float> INST_CLASS buildRadialPyrGaussian(const Image<float>& image, int firstlevel, int depth);
template ImageSet< PixRGB<float> > INST_CLASS buildRadialPyrGaussian(const Image< PixRGB<float> >& image, int firstlevel, int depth);
template ImageSet<byte> INST_CLASS buildPyrConvolve(const Image<byte>& image, int firstlevel, int depth, const Image<float>& filter, ConvolutionBoundaryStrategy boundary);
template ImageSet< PixRGB<byte> > INST_CLASS buildPyrConvolve(const Image< PixRGB<byte> >& image, int firstlevel, int depth, const Image<float>& filter, ConvolutionBoundaryStrategy boundary);
template ImageSet<float> INST_CLASS buildPyrConvolve(const Image<float>& image, int firstlevel, int depth, const Image<float>& filter, ConvolutionBoundaryStrategy boundary);
template ImageSet< PixRGB<float> > INST_CLASS buildPyrConvolve(const Image< PixRGB<float> >& image, int firstlevel, int depth, const Image<float>& filter, ConvolutionBoundaryStrategy boundary);
template ImageSet<byte> INST_CLASS buildPyrLaplacian(const Image<byte>& image, int firstlevel, int depth, int filterSize);
template ImageSet< PixRGB<byte> > INST_CLASS buildPyrLaplacian(const Image< PixRGB<byte> >& image, int firstlevel, int depth, int filterSize);
template ImageSet<float> INST_CLASS buildPyrLaplacian(const Image<float>& image, int firstlevel, int depth, int filterSize);
template ImageSet< PixRGB<float> > INST_CLASS buildPyrLaplacian(const Image< PixRGB<float> >& image, int firstlevel, int depth, int filterSize);
template ImageSet<byte> INST_CLASS buildPyrOrientedFromLaplacian(const ImageSet<byte>& laplacian, int filterSize, float theta, float intens , const bool usetab );
template ImageSet< PixRGB<byte> > INST_CLASS buildPyrOrientedFromLaplacian(const ImageSet< PixRGB<byte> >& laplacian, int filterSize, float theta, float intens , const bool usetab );
template ImageSet<float> INST_CLASS buildPyrOrientedFromLaplacian(const ImageSet<float>& laplacian, int filterSize, float theta, float intens , const bool usetab );
template ImageSet< PixRGB<float> > INST_CLASS buildPyrOrientedFromLaplacian(const ImageSet< PixRGB<float> >& laplacian, int filterSize, float theta, float intens , const bool usetab );
template ImageSet<byte> INST_CLASS buildPyrOriented(const Image<byte>& image, int firstlevel, int depth, int filterSize, float theta, float intens , const bool usetab );
template ImageSet< PixRGB<byte> > INST_CLASS buildPyrOriented(const Image< PixRGB<byte> >& image, int firstlevel, int depth, int filterSize, float theta, float intens , const bool usetab );
template ImageSet<float> INST_CLASS buildPyrOriented(const Image<float>& image, int firstlevel, int depth, int filterSize, float theta, float intens , const bool usetab );
template ImageSet< PixRGB<float> > INST_CLASS buildPyrOriented(const Image< PixRGB<float> >& image, int firstlevel, int depth, int filterSize, float theta, float intens , const bool usetab );
template ImageSet<byte> INST_CLASS buildPyrLocalAvg(const Image<byte>& image, int depth);
template ImageSet< PixRGB<byte> > INST_CLASS buildPyrLocalAvg(const Image< PixRGB<byte> >& image, int depth);
template ImageSet<float> INST_CLASS buildPyrLocalAvg(const Image<float>& image, int depth);
template ImageSet< PixRGB<float> > INST_CLASS buildPyrLocalAvg(const Image< PixRGB<float> >& image, int depth);
template ImageSet<byte> INST_CLASS buildPyrLocalAvg2x2(const Image<byte>& image, int depth);
template ImageSet< PixRGB<byte> > INST_CLASS buildPyrLocalAvg2x2(const Image< PixRGB<byte> >& image, int depth);
template ImageSet<float> INST_CLASS buildPyrLocalAvg2x2(const Image<float>& image, int depth);
template ImageSet< PixRGB<float> > INST_CLASS buildPyrLocalAvg2x2(const Image< PixRGB<float> >& image, int depth);
template ImageSet<byte> INST_CLASS buildPyrLocalMax(const Image<byte>& image, int depth);
template ImageSet< PixRGB<byte> > INST_CLASS buildPyrLocalMax(const Image< PixRGB<byte> >& image, int depth);
template ImageSet<float> INST_CLASS buildPyrLocalMax(const Image<float>& image, int depth);
template ImageSet< PixRGB<float> > INST_CLASS buildPyrLocalMax(const Image< PixRGB<float> >& image, int depth);
template ImageSet<byte> INST_CLASS buildPyrGeneric(const Image<byte>& image, int firstlevel, int depth, const PyramidType typ, const float gabor_theta , const float gabor_intens );
template ImageSet< PixRGB<byte> > INST_CLASS buildPyrGeneric(const Image< PixRGB<byte> >& image, int firstlevel, int depth, const PyramidType typ, const float gabor_theta , const float gabor_intens );
template ImageSet<float> INST_CLASS buildPyrGeneric(const Image<float>& image, int firstlevel, int depth, const PyramidType typ, const float gabor_theta , const float gabor_intens );
template ImageSet< PixRGB<float> > INST_CLASS buildPyrGeneric(const Image< PixRGB<float> >& image, int firstlevel, int depth, const PyramidType typ, const float gabor_theta , const float gabor_intens );
template Image<byte> INST_CLASS centerSurround(const ImageSet<byte>& pyr, const int lev1, const int lev2, const bool absol , const ImageSet<float>* clipPyr );
template Image<float> INST_CLASS centerSurround(const ImageSet<float>& pyr, const int lev1, const int lev2, const bool absol , const ImageSet<float>* clipPyr );
template void INST_CLASS centerSurround(const ImageSet<byte>& pyr, const int lev1, const int lev2, Image<byte>& pos, Image<byte>& neg, const ImageSet<float>* clipPyr );
template void INST_CLASS centerSurround(const ImageSet<float>& pyr, const int lev1, const int lev2, Image<float>& pos, Image<float>& neg, const ImageSet<float>* clipPyr );
template Image<byte> INST_CLASS centerSurroundSingleOpponent(const ImageSet<byte>& cpyr, const ImageSet<byte>& spyr, const int lev1, const int lev2, const bool absol , const ImageSet<float>* clipPyr );
template Image<float> INST_CLASS centerSurroundSingleOpponent(const ImageSet<float>& cpyr, const ImageSet<float>& spyr, const int lev1, const int lev2, const bool absol , const ImageSet<float>* clipPyr );
template void INST_CLASS centerSurroundSingleOpponent(const ImageSet<byte>& cpyr, const ImageSet<byte>& spyr, const int lev1, const int lev2, Image<byte>& pos, Image<byte>& neg, const ImageSet<float>* clipPyr );
template void INST_CLASS centerSurroundSingleOpponent(const ImageSet<float>& cpyr, const ImageSet<float>& spyr, const int lev1, const int lev2, Image<float>& pos, Image<float>& neg, const ImageSet<float>* clipPyr );
template Image<byte> INST_CLASS centerSurroundDiff(const ImageSet<byte>& pyr1, const ImageSet<byte>& pyr2, const int lev1, const int lev2, const bool absol , const ImageSet<float>* clipPyr );
template Image<float> INST_CLASS centerSurroundDiff(const ImageSet<float>& pyr1, const ImageSet<float>& pyr2, const int lev1, const int lev2, const bool absol , const ImageSet<float>* clipPyr );
template void INST_CLASS centerSurroundDiff(const ImageSet<byte>& pyr1, const ImageSet<byte>& pyr2, const int lev1, const int lev2, Image<byte>& pos, Image<byte>& neg, const ImageSet<float>* clipPyr );
template void INST_CLASS centerSurroundDiff(const ImageSet<float>& pyr1, const ImageSet<float>& pyr2, const int lev1, const int lev2, Image<float>& pos, Image<float>& neg, const ImageSet<float>* clipPyr );
template Image<byte> INST_CLASS centerSurroundDiffSingleOpponent(const ImageSet<byte>& cpyr1, const ImageSet<byte>& cpyr2, const ImageSet<byte>& spyr1, const ImageSet<byte>& spyr2, const int lev1, const int lev2, const bool absol , const ImageSet<float>* clipPyr );
template Image<float> INST_CLASS centerSurroundDiffSingleOpponent(const ImageSet<float>& cpyr1, const ImageSet<float>& cpyr2, const ImageSet<float>& spyr1, const ImageSet<float>& spyr2, const int lev1, const int lev2, const bool absol , const ImageSet<float>* clipPyr );
template void INST_CLASS centerSurroundDiffSingleOpponent(const ImageSet<byte>& cpyr1, const ImageSet<byte>& cpyr2, const ImageSet<byte>& spyr1, const ImageSet<byte>& spyr2, const int lev1, const int lev2, Image<byte>& pos, Image<byte>& neg, const ImageSet<float>* clipPyr );
template void INST_CLASS centerSurroundDiffSingleOpponent(const ImageSet<float>& cpyr1, const ImageSet<float>& cpyr2, const ImageSet<float>& spyr1, const ImageSet<float>& spyr2, const int lev1, const int lev2, Image<float>& pos, Image<float>& neg, const ImageSet<float>* clipPyr );
template Image<byte> INST_CLASS weightedBlur(const Image<byte>& modulator, const ImageSet<byte>& pyr);
template Image< PixRGB<byte> > INST_CLASS weightedBlur(const Image<byte>& modulator, const ImageSet< PixRGB<byte> >& pyr);
template Image<float> INST_CLASS weightedBlur(const Image<byte>& modulator, const ImageSet<float>& pyr);
template Image< PixRGB<float> > INST_CLASS weightedBlur(const Image<byte>& modulator, const ImageSet< PixRGB<float> >& pyr);
template Image<byte> INST_CLASS foveate(const Image<byte>& mask, const ImageSet<byte>& pyr);
template Image< PixRGB<byte> > INST_CLASS foveate(const Image<byte>& mask, const ImageSet< PixRGB<byte> >& pyr);
template Image<float> INST_CLASS foveate(const Image<byte>& mask, const ImageSet<float>& pyr);
template Image< PixRGB<float> > INST_CLASS foveate(const Image<byte>& mask, const ImageSet< PixRGB<float> >& pyr);
#ifdef INST_NAMESPACE
}
#endif
