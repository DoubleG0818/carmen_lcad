/*               -*- mode: c++ -*-

   DO NOT EDIT THIS FILE -- CHANGES WILL BE LOST!

   [Wed Dec 12 08:54:12 BRST 2012] This file was automatically generated by
   applying the script "./devscripts/extract_templates.tcl" to the template
   declarations in source file "src/Image/ColorOps.H" for types [byte,
   float]
*/
#ifndef INST_CLASS
#  define INST_CLASS
#endif
#ifdef INST_NAMESPACE
namespace INST_NAMESPACE {
#endif
template Image<PixRGB<byte> > INST_CLASS makeRGB(const Image<byte>& red, const Image<byte>& green, const Image<byte>& blue);
template Image<PixRGB<float> > INST_CLASS makeRGB(const Image<float>& red, const Image<float>& green, const Image<float>& blue);
template void INST_CLASS getComponents(const Image<PixRGB<byte> >& src, Image<byte>& red, Image<byte>& green, Image<byte>& blue);
template void INST_CLASS getComponents(const Image<PixRGB<float> >& src, Image<float>& red, Image<float>& green, Image<float>& blue);
template Image<PixRGB<byte> > INST_CLASS stain(const Image<byte>& src, PixRGB<float> color);
template Image<PixRGB<float> > INST_CLASS stain(const Image<float>& src, PixRGB<float> color);
template void INST_CLASS getMinMaxC(const Image<PixRGB<byte> >& src, byte& mi, byte& ma);
template void INST_CLASS getMinMaxC(const Image<PixRGB<float> >& src, float& mi, float& ma);
template PixRGB<float> INST_CLASS meanRGB(const Image<PixRGB<byte> >& src);
template PixRGB<float> INST_CLASS meanRGB(const Image<PixRGB<float> >& src);
template Image<byte> INST_CLASS luminance(const Image<PixRGB<byte> >& src);
template Image<float> INST_CLASS luminance(const Image<PixRGB<float> >& src);
template Image<byte> INST_CLASS luminance(const Image<byte>& src);
template Image<float> INST_CLASS luminance(const Image<float>& src);
template Image<byte> INST_CLASS luminanceNTSC(const Image<PixRGB<byte> >& src);
template Image<float> INST_CLASS luminanceNTSC(const Image<PixRGB<float> >& src);
template Image< PixRGB<byte> > INST_CLASS toRGB(const Image<byte>& src);
template Image< PixRGB<float> > INST_CLASS toRGB(const Image<float>& src);
template Image< PixRGB<byte> > INST_CLASS toRGB(const Image< PixRGB<byte> >& src);
template Image< PixRGB<float> > INST_CLASS toRGB(const Image< PixRGB<float> >& src);
template Image<float> INST_CLASS infoMeasure(const Image<PixRGB<byte> >& src, const float eps, const int size);
template Image<float> INST_CLASS infoMeasure(const Image<PixRGB<float> >& src, const float eps, const int size);
template void INST_CLASS getYIQ(const Image<PixRGB<byte> >& src, Image<byte>& y, Image<byte>& i, Image<byte>& q);
template void INST_CLASS getYIQ(const Image<PixRGB<float> >& src, Image<float>& y, Image<float>& i, Image<float>& q);
template void INST_CLASS getJpegYUV(const Image<PixRGB<byte> >& src, Image<byte>& y, Image<byte>& u, Image<byte>& v);
template void INST_CLASS getJpegYUV(const Image<PixRGB<float> >& src, Image<float>& y, Image<float>& u, Image<float>& v);
template Image<PixRGB<byte> > INST_CLASS luminanceNormalize(const Image<PixRGB<byte> >& src, const byte thresh);
template Image<PixRGB<float> > INST_CLASS luminanceNormalize(const Image<PixRGB<float> >& src, const float thresh);
template void INST_CLASS getRGBY(const Image<PixRGB<byte> >& src, Image< promote_trait<byte, float>::TP>& rg, Image< promote_trait<byte, float>::TP>& by, const promote_trait<byte, float>::TP thresh);
template void INST_CLASS getRGBY(const Image<PixRGB<float> >& src, Image< promote_trait<float, float>::TP>& rg, Image< promote_trait<float, float>::TP>& by, const promote_trait<float, float>::TP thresh);
template void INST_CLASS getRGBYsimple(const Image<PixRGB<byte> >& src, Image< promote_trait<byte, float>::TP>& rg, Image< promote_trait<byte, float>::TP>& by, const promote_trait<byte, float>::TP thresh);
template void INST_CLASS getRGBYsimple(const Image<PixRGB<float> >& src, Image< promote_trait<float, float>::TP>& rg, Image< promote_trait<float, float>::TP>& by, const promote_trait<float, float>::TP thresh);
template void INST_CLASS getRGBY(const Image<PixRGB<byte> >& src, Image<byte>& r, Image<byte>& g, Image<byte>& b, Image<byte>& y, const byte thresh);
template void INST_CLASS getRGBY(const Image<PixRGB<float> >& src, Image<float>& r, Image<float>& g, Image<float>& b, Image<float>& y, const float thresh);
template void INST_CLASS getRGBY(const Image<PixRGB<byte> >& src, Image<byte>& rg,  Image<byte>& by, Image<byte>& sat, Image<byte>& val, const ushort H2SVtype );
template void INST_CLASS getRGBY(const Image<PixRGB<float> >& src, Image<float>& rg,  Image<float>& by, Image<float>& sat, Image<float>& val, const ushort H2SVtype );
template void INST_CLASS getDKL(const Image<PixRGB<byte> >& src, Image< promote_trait<byte, float>::TP>& dimg, Image< promote_trait<byte, float>::TP>& kimg, Image< promote_trait<byte, float>::TP>& limg);
template void INST_CLASS getDKL(const Image<PixRGB<float> >& src, Image< promote_trait<float, float>::TP>& dimg, Image< promote_trait<float, float>::TP>& kimg, Image< promote_trait<float, float>::TP>& limg);
template void INST_CLASS getDKLM(const Image<PixRGB<byte> >& src, Image< promote_trait<byte, float>::TP>& RGimg, Image< promote_trait<byte, float>::TP>& BYimg, Image< promote_trait<byte, float>::TP>& LUMimg);
template void INST_CLASS getDKLM(const Image<PixRGB<float> >& src, Image< promote_trait<float, float>::TP>& RGimg, Image< promote_trait<float, float>::TP>& BYimg, Image< promote_trait<float, float>::TP>& LUMimg);
template void INST_CLASS getLAB(const Image<PixRGB<byte> >& src, Image< promote_trait<byte, float>::TP>& limg, Image< promote_trait<byte, float>::TP>& aimg, Image< promote_trait<byte, float>::TP>& bimg);
template void INST_CLASS getLAB(const Image<PixRGB<float> >& src, Image< promote_trait<float, float>::TP>& limg, Image< promote_trait<float, float>::TP>& aimg, Image< promote_trait<float, float>::TP>& bimg);
template void INST_CLASS getNormalizedLAB(const Image<PixRGB<byte> >& src, Image< promote_trait<byte, float>::TP>& limg, Image< promote_trait<byte, float>::TP>& aimg, Image< promote_trait<byte, float>::TP>& bimg);
template void INST_CLASS getNormalizedLAB(const Image<PixRGB<float> >& src, Image< promote_trait<float, float>::TP>& limg, Image< promote_trait<float, float>::TP>& aimg, Image< promote_trait<float, float>::TP>& bimg);
template double INST_CLASS pSNRcolor(const Image< PixRGB<byte> >& img1, const Image< PixRGB<byte> >& img2);
template double INST_CLASS pSNRcolor(const Image< PixRGB<float> >& img1, const Image< PixRGB<float> >& img2);
template double INST_CLASS pSNRcolor(const Image< PixRGB<byte> >& img1, const Image< PixRGB<byte> >& img2, const Image<float>& weight);
template double INST_CLASS pSNRcolor(const Image< PixRGB<float> >& img1, const Image< PixRGB<float> >& img2, const Image<float>& weight);
template Image< PixRGB<byte> > INST_CLASS normalizeRGB(const Image< PixRGB<byte> >& img, PixRGB<byte> min, PixRGB<byte> max);
template Image< PixRGB<float> > INST_CLASS normalizeRGB(const Image< PixRGB<float> >& img, PixRGB<float> min, PixRGB<float> max);
template Image<byte> INST_CLASS maxRGB(const Image< PixRGB<byte> >& img);
template Image<float> INST_CLASS maxRGB(const Image< PixRGB<float> >& img);
template Image< PixRGB<byte> > colorStain (const Image<byte>& src, const byte& min, const byte& max, const PixRGB<byte>& color);
template Image< PixRGB<float> > colorStain (const Image<float>& src, const float& min, const float& max, const PixRGB<float>& color);
#ifdef INST_NAMESPACE
}
#endif
