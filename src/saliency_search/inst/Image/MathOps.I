/*               -*- mode: c++ -*-

   DO NOT EDIT THIS FILE -- CHANGES WILL BE LOST!

   [Wed Dec 12 08:54:50 BRST 2012] This file was automatically generated by
   applying the script "./devscripts/extract_templates.tcl" to the template
   declarations in source file "src/Image/MathOps.H" for types [byte, float]
*/
#ifndef INST_CLASS
#  define INST_CLASS
#endif
#ifdef INST_NAMESPACE
namespace INST_NAMESPACE {
#endif
template double INST_CLASS sum(const Image<byte>& a);
template double INST_CLASS sum(const Image<float>& a);
template double INST_CLASS mean(const Image<byte>& a);
template double INST_CLASS mean(const Image<float>& a);
template double INST_CLASS stdev(const Image<byte>& a);
template double INST_CLASS stdev(const Image<float>& a);
template Range<byte> INST_CLASS rangeOf(const Image<byte>& img);
template Range<float> INST_CLASS rangeOf(const Image<float>& img);
template Image<byte> INST_CLASS remapRange(const Image<byte>& img, const Range<byte>& from, const Range<byte>& to);
template Image<float> INST_CLASS remapRange(const Image<float>& img, const Range<float>& from, const Range<float>& to);
template Image<byte> INST_CLASS squared(const Image<byte>& a);
template Image<float> INST_CLASS squared(const Image<float>& a);
template Image< promote_trait<byte,float>::TP> INST_CLASS toPower(const Image<byte>& a, double pow);
template Image< promote_trait<float,float>::TP> INST_CLASS toPower(const Image<float>& a, double pow);
template Image< promote_trait<byte,float>::TP> INST_CLASS toPowerRegion(const Image<byte>& a, double pow, std::vector<Point2D<int> > region);
template Image< promote_trait<float,float>::TP> INST_CLASS toPowerRegion(const Image<float>& a, double pow, std::vector<Point2D<int> > region);
template Image<byte> INST_CLASS abs(const Image<byte>& a);
template Image<float> INST_CLASS abs(const Image<float>& a);
template Image< promote_trait<byte,float>::TP> INST_CLASS hmaxActivation(const Image<byte>& a, const float sigma);
template Image< promote_trait<float,float>::TP> INST_CLASS hmaxActivation(const Image<float>& a, const float sigma);
template Image<byte> INST_CLASS absDiff(const Image<byte>& b, const Image<byte>& c);
template Image< PixRGB<byte> > INST_CLASS absDiff(const Image< PixRGB<byte> >& b, const Image< PixRGB<byte> >& c);
template Image<float> INST_CLASS absDiff(const Image<float>& b, const Image<float>& c);
template Image< PixRGB<float> > INST_CLASS absDiff(const Image< PixRGB<float> >& b, const Image< PixRGB<float> >& c);
template Image<byte> INST_CLASS clampedDiff(const Image<byte>& b, const Image<byte>& c);
template Image< PixRGB<byte> > INST_CLASS clampedDiff(const Image< PixRGB<byte> >& b, const Image< PixRGB<byte> >& c);
template Image<float> INST_CLASS clampedDiff(const Image<float>& b, const Image<float>& c);
template Image< PixRGB<float> > INST_CLASS clampedDiff(const Image< PixRGB<float> >& b, const Image< PixRGB<float> >& c);
template Image<byte> INST_CLASS binaryReverse(const Image<byte>& a, const byte val);
template Image<float> INST_CLASS binaryReverse(const Image<float>& a, const float val);
template Image<byte> INST_CLASS average(const Image<byte>& b, const Image<byte>& c);
template Image<float> INST_CLASS average(const Image<float>& b, const Image<float>& c);
template Image<byte> INST_CLASS averageWeighted(Image<byte>& a, const Image<byte>& b, byte *aWeight);
template Image<float> INST_CLASS averageWeighted(Image<float>& a, const Image<float>& b, float *aWeight);
template Image<byte> INST_CLASS takeMax(const Image<byte>& a, const Image<byte>& b);
template Image< PixRGB<byte> > INST_CLASS takeMax(const Image< PixRGB<byte> >& a, const Image< PixRGB<byte> >& b);
template Image<float> INST_CLASS takeMax(const Image<float>& a, const Image<float>& b);
template Image< PixRGB<float> > INST_CLASS takeMax(const Image< PixRGB<float> >& a, const Image< PixRGB<float> >& b);
template void INST_CLASS takeLinkedMax(const Image<byte>& a1, const Image<byte>& a2, const Image<byte>& b1, const Image<byte>& b2, Image<byte>& aout, Image<byte>& bout);
template void INST_CLASS takeLinkedMax(const Image<float>& a1, const Image<float>& a2, const Image<float>& b1, const Image<float>& b2, Image<float>& aout, Image<float>& bout);
template Image<byte> INST_CLASS takeMin(const Image<byte>& a, const Image<byte>& b);
template Image<float> INST_CLASS takeMin(const Image<float>& a, const Image<float>& b);
template Image<byte> INST_CLASS quadEnergy(const Image<byte>& img1, const Image<byte>& img2);
template Image< PixRGB<byte> > INST_CLASS quadEnergy(const Image< PixRGB<byte> >& img1, const Image< PixRGB<byte> >& img2);
template Image<float> INST_CLASS quadEnergy(const Image<float>& img1, const Image<float>& img2);
template Image< PixRGB<float> > INST_CLASS quadEnergy(const Image< PixRGB<float> >& img1, const Image< PixRGB<float> >& img2);
template double INST_CLASS RMSerr(const Image<byte>& arr1, const Image<byte>& arr2);
template double INST_CLASS RMSerr(const Image<float>& arr1, const Image<float>& arr2);
template Image<byte> INST_CLASS overlay(const Image<byte>& top, const Image<byte>& bottom, const float trans);
template Image< PixRGB<byte> > INST_CLASS overlay(const Image< PixRGB<byte> >& top, const Image< PixRGB<byte> >& bottom, const float trans);
template Image<float> INST_CLASS overlay(const Image<float>& top, const Image<float>& bottom, const float trans);
template Image< PixRGB<float> > INST_CLASS overlay(const Image< PixRGB<float> >& top, const Image< PixRGB<float> >& bottom, const float trans);
template float INST_CLASS sumXY(const Image<byte>& img, std::vector<float>& sumX, std::vector<float>& sumY);
template float INST_CLASS sumXY(const Image<float>& img, std::vector<float>& sumX, std::vector<float>& sumY);
template double INST_CLASS distance(const Image<byte> &img1, const Image<byte> &img2);
template double INST_CLASS distance(const Image<float> &img1, const Image<float> &img2);
template double INST_CLASS distance(const Image<byte> &img1, const Image<byte> &img2, const Image<float> &weight);
template double INST_CLASS distance(const Image<float> &img1, const Image<float> &img2, const Image<float> &weight);
template double INST_CLASS corrpatch(const Image<byte>& img1, const Point2D<int>& topleft1, const Dims& patchdims, const Image<byte>& img2, const Point2D<int>& topleft2, const double eps );
template double INST_CLASS corrpatch(const Image<float>& img1, const Point2D<int>& topleft1, const Dims& patchdims, const Image<float>& img2, const Point2D<int>& topleft2, const double eps );
template void INST_CLASS corrEigenMatrix(const std::vector<std::vector<Image<byte> > > &baseImages, Image<byte> &baseCorr, Image<byte> &baseMean, Image<byte> &baseSTD,  Image<byte> &baseSS, uint &baseN, bool returnR );
template void INST_CLASS corrEigenMatrix(const std::vector<std::vector<Image<float> > > &baseImages, Image<float> &baseCorr, Image<float> &baseMean, Image<float> &baseSTD,  Image<float> &baseSS, uint &baseN, bool returnR );
template void INST_CLASS getLikelyhoodImage(const std::vector<Image<byte> > &baseImages, const Image<byte> &baseCorr, const Image<byte> &baseMean, const bool returnLogLikelyhood, Image<byte> &likelyhoodImage, Image<byte> &nonNormalizedLImage);
template void INST_CLASS getLikelyhoodImage(const std::vector<Image<float> > &baseImages, const Image<float> &baseCorr, const Image<float> &baseMean, const bool returnLogLikelyhood, Image<float> &likelyhoodImage, Image<float> &nonNormalizedLImage);
template Image<byte> INST_CLASS getNormalizedBayesImage(const Image<byte> classImage1, const Image<byte> classImage2, const bool usingLogLikelyhood, const byte beta, const byte classPrior1 , const byte classPrior2 , const byte bias        );
template Image<float> INST_CLASS getNormalizedBayesImage(const Image<float> classImage1, const Image<float> classImage2, const bool usingLogLikelyhood, const float beta, const float classPrior1 , const float classPrior2 , const float bias        );
template Image<byte> INST_CLASS getPearsonRMatrix(const Image<byte> &eigenMatrix, const Image<byte> &STDMatrix);
template Image<float> INST_CLASS getPearsonRMatrix(const Image<float> &eigenMatrix, const Image<float> &STDMatrix);
template void INST_CLASS getAugmentedBeliefBayesImage(const Image<byte> &bayesImage, const Image<byte> &beliefImage1, const Image<byte> &beliefImage2, const byte medianPoint, Image<byte> &beliefImage, Image<byte> &beliefValue);
template void INST_CLASS getAugmentedBeliefBayesImage(const Image<float> &bayesImage, const Image<float> &beliefImage1, const Image<float> &beliefImage2, const float medianPoint, Image<float> &beliefImage, Image<float> &beliefValue);
template double INST_CLASS pSNR(const Image<byte> &img1, const Image<byte> &img2);
template double INST_CLASS pSNR(const Image<float> &img1, const Image<float> &img2);
template double INST_CLASS pSNR(const Image<byte> &img1, const Image<byte> &img2, const Image<float>& weight);
template double INST_CLASS pSNR(const Image<float> &img1, const Image<float> &img2, const Image<float>& weight);
template Image< promote_trait<byte,float>::TP> INST_CLASS sqrt(const Image<byte>& img);
template Image< promote_trait<float,float>::TP> INST_CLASS sqrt(const Image<float>& img);
template Image< promote_trait<byte,float>::TP> INST_CLASS inverse(const Image<byte>& img, const byte eps);
template Image< promote_trait<float,float>::TP> INST_CLASS inverse(const Image<float>& img, const float eps);
template Image< promote_trait<byte,float>::TP> INST_CLASS exp(const Image<byte>& img);
template Image< promote_trait<float,float>::TP> INST_CLASS exp(const Image<float>& img);
template Image< promote_trait<byte,float>::TP> INST_CLASS negexp(const Image<byte>& img);
template Image< promote_trait<float,float>::TP> INST_CLASS negexp(const Image<float>& img);
template Image< promote_trait<byte,float>::TP> INST_CLASS log(const Image<byte>& img);
template Image< promote_trait<float,float>::TP> INST_CLASS log(const Image<float>& img);
template Image< promote_trait<byte,float>::TP> INST_CLASS log10(const Image<byte>& img);
template Image< promote_trait<float,float>::TP> INST_CLASS log10(const Image<float>& img);
template bool INST_CLASS getCentroidFirstLast(std::vector<byte> vect, float& centroid, int& first, int& last);
template bool INST_CLASS getCentroidFirstLast(std::vector<float> vect, float& centroid, int& first, int& last);
template Point2D<int> INST_CLASS centroid(const Image<byte>& img, Rectangle& boundingBox, float& cenX, float& cenY);
template Point2D<int> INST_CLASS centroid(const Image<float>& img, Rectangle& boundingBox, float& cenX, float& cenY);
template Point2D<int> INST_CLASS centroid(const Image<byte>& img);
template Point2D<int> INST_CLASS centroid(const Image<float>& img);
template Image<byte> INST_CLASS squash(const Image<byte>& src, const byte oldmin, const byte newmin, const byte oldmid, const byte newmid, const byte oldmax, const byte newmax);
template Image<float> INST_CLASS squash(const Image<float>& src, const float oldmin, const float newmin, const float oldmid, const float newmid, const float oldmax, const float newmax);
template Image<byte> INST_CLASS squash(const Image<byte>& src, const byte newmin, const byte oldmid, const byte newmid, const byte newmax);
template Image<float> INST_CLASS squash(const Image<float>& src, const float newmin, const float oldmid, const float newmid, const float newmax);
template Image<byte> INST_CLASS squash(const Image<byte>& src, const byte oldmid, const byte newmid);
template Image<float> INST_CLASS squash(const Image<float>& src, const float oldmid, const float newmid);
template Image<byte> INST_CLASS scramble(const Image<byte>& ima);
template Image< PixRGB<byte> > INST_CLASS scramble(const Image< PixRGB<byte> >& ima);
template Image<float> INST_CLASS scramble(const Image<float>& ima);
template Image< PixRGB<float> > INST_CLASS scramble(const Image< PixRGB<float> >& ima);
template void INST_CLASS inplaceAddWeighted(Image<byte>& a, const Image<byte>& b, const float coeff);
template void INST_CLASS inplaceAddWeighted(Image<float>& a, const Image<float>& b, const float coeff);
template void INST_CLASS inplaceSquare(Image<byte>& a);
template void INST_CLASS inplaceSquare(Image<float>& a);
template void INST_CLASS inplaceAttenuateBorders(Image<byte>& a, int size);
template void INST_CLASS inplaceAttenuateBorders(Image< PixRGB<byte> >& a, int size);
template void INST_CLASS inplaceAttenuateBorders(Image<float>& a, int size);
template void INST_CLASS inplaceAttenuateBorders(Image< PixRGB<float> >& a, int size);
template void INST_CLASS inplaceSetBorders(Image<byte>& a, const int size, const byte value );
template void INST_CLASS inplaceSetBorders(Image< PixRGB<byte> >& a, const int size, const  PixRGB<byte>  value );
template void INST_CLASS inplaceSetBorders(Image<float>& a, const int size, const float value );
template void INST_CLASS inplaceSetBorders(Image< PixRGB<float> >& a, const int size, const  PixRGB<float>  value );
template Image< promote_trait<byte,float>::TP> INST_CLASS addPowerNoise(const Image<byte>& src, double beta);
template Image< promote_trait<float,float>::TP> INST_CLASS addPowerNoise(const Image<float>& src, double beta);
template void INST_CLASS getMinMax(const Image<byte>& src, byte& mini, byte& maxi);
template void INST_CLASS getMinMax(const Image<float>& src, float& mini, float& maxi);
template void INST_CLASS getMaskedMinMax(const Image<byte>& src, const Image<byte>& mask, byte& min_in, byte& max_in, byte& min_out, byte& max_out);
template void INST_CLASS getMaskedMinMax(const Image<float>& src, const Image<byte>& mask, float& min_in, float& max_in, float& min_out, float& max_out);
template void INST_CLASS getMinMaxAvg(const Image<byte>& src, byte& mini, byte& maxi, byte& avg);
template void INST_CLASS getMinMaxAvg(const Image<float>& src, float& mini, float& maxi, float& avg);
template void INST_CLASS getMaskedMinMaxAvg(const Image<byte>& src, const Image<byte> &mask, byte& mi, byte& ma, byte& avg);
template void INST_CLASS getMaskedMinMaxAvg(const Image<float>& src, const Image<byte> &mask, float& mi, float& ma, float& avg);
template void INST_CLASS getMaskedMinMaxSumArea(const Image<byte>& src, const Image<float> &mask, byte& mi, byte& ma, promote_trait<byte,float>::TP &sum, promote_trait<byte,float>::TP &area);
template void INST_CLASS getMaskedMinMaxSumArea(const Image<float>& src, const Image<float> &mask, float& mi, float& ma, promote_trait<float,float>::TP &sum, promote_trait<float,float>::TP &area);
template void INST_CLASS getMinMaxAvgEtc(const Image<byte>& src, byte& xmini, byte& xmaxi, byte& xavg, byte& xstd, ushort& minPosX, ushort& minPosY, ushort& maxPosX, ushort& maxPosY, uint& pixCount);
template void INST_CLASS getMinMaxAvgEtc(const Image<float>& src, float& xmini, float& xmaxi, float& xavg, float& xstd, ushort& minPosX, ushort& minPosY, ushort& maxPosX, ushort& maxPosY, uint& pixCount);
template bool INST_CLASS isFinite(const Image<byte>& src);
template bool INST_CLASS isFinite(const Image<float>& src);
template void INST_CLASS findMax(const Image<byte>& src, Point2D<int>& p, byte& maxval);
template void INST_CLASS findMax(const Image<float>& src, Point2D<int>& p, float& maxval);
template void INST_CLASS findMin(const Image<byte>& src, Point2D<int>& p, byte& minval);
template void INST_CLASS findMin(const Image<float>& src, Point2D<int>& p, float& minval);
template void INST_CLASS inplaceClamp(Image<byte>& dst, const byte cmin, const byte cmax);
template void INST_CLASS inplaceClamp(Image<float>& dst, const float cmin, const float cmax);
template void INST_CLASS inplaceNormalize(Image<byte>& dst, const byte nmin, const byte nmax);
template void INST_CLASS inplaceNormalize(Image<float>& dst, const float nmin, const float nmax);
template void INST_CLASS inplaceNormalize(Image<byte>& dst, const byte nmin, const byte nmax, byte& oldmin, byte& oldmax);
template void INST_CLASS inplaceNormalize(Image<float>& dst, const float nmin, const float nmax, float& oldmin, float& oldmax);
template bool INST_CLASS isLocalMax(const Image<byte>& src, const Point2D<int>& p);
template bool INST_CLASS isLocalMax(const Image<float>& src, const Point2D<int>& p);
template void INST_CLASS inplaceRectify(Image<byte>& dst);
template void INST_CLASS inplaceRectify(Image<float>& dst);
template void INST_CLASS splitPosNeg(const Image<byte>& src, Image<byte>& pos, Image<byte>& neg);
template void INST_CLASS splitPosNeg(const Image<float>& src, Image<float>& pos, Image<float>& neg);
template void INST_CLASS inplaceLowThresh(Image<byte>& dst, const byte thresh, const byte val );
template void INST_CLASS inplaceLowThresh(Image<float>& dst, const float thresh, const float val );
template void INST_CLASS inplaceLowThreshAbs(Image<byte>& dst, const byte thresh, const byte val );
template void INST_CLASS inplaceLowThreshAbs(Image<float>& dst, const float thresh, const float val );
template void INST_CLASS inplaceSigmoid(Image<byte>& dst, const float g, const float h, const float s);
template void INST_CLASS inplaceSigmoid(Image<float>& dst, const float g, const float h, const float s);
template int INST_CLASS emptyArea(const Image<byte>& src);
template int INST_CLASS emptyArea(const Image<float>& src);
template int INST_CLASS countThresh(const Image<byte>& src, const byte thresh, const bool absol );
template int INST_CLASS countThresh(const Image<float>& src, const float thresh, const bool absol );
#ifdef INST_NAMESPACE
}
#endif
