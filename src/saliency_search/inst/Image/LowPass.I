/*               -*- mode: c++ -*-

   DO NOT EDIT THIS FILE -- CHANGES WILL BE LOST!

   [Wed Dec 12 08:54:43 BRST 2012] This file was automatically generated by
   applying the script "./devscripts/extract_templates.tcl" to the template
   declarations in source file "src/Image/LowPass.H" for types [byte, float]
*/
#ifndef INST_CLASS
#  define INST_CLASS
#endif
#ifdef INST_NAMESPACE
namespace INST_NAMESPACE {
#endif
template Image< promote_trait<byte, float>::TP> INST_CLASS lowPass3(const Image<byte>& src, const bool go_x , const bool go_y );
template Image< promote_trait< PixRGB<byte> , float>::TP> INST_CLASS lowPass3(const Image< PixRGB<byte> >& src, const bool go_x , const bool go_y );
template Image< promote_trait<float, float>::TP> INST_CLASS lowPass3(const Image<float>& src, const bool go_x , const bool go_y );
template Image< promote_trait< PixRGB<float> , float>::TP> INST_CLASS lowPass3(const Image< PixRGB<float> >& src, const bool go_x , const bool go_y );
template Image< promote_trait<byte, float>::TP> INST_CLASS lowPass3x(const Image<byte>& src);
template Image< promote_trait< PixRGB<byte> , float>::TP> INST_CLASS lowPass3x(const Image< PixRGB<byte> >& src);
template Image< promote_trait<float, float>::TP> INST_CLASS lowPass3x(const Image<float>& src);
template Image< promote_trait< PixRGB<float> , float>::TP> INST_CLASS lowPass3x(const Image< PixRGB<float> >& src);
template Image< promote_trait<byte, float>::TP> INST_CLASS lowPass3y(const Image<byte>& src);
template Image< promote_trait< PixRGB<byte> , float>::TP> INST_CLASS lowPass3y(const Image< PixRGB<byte> >& src);
template Image< promote_trait<float, float>::TP> INST_CLASS lowPass3y(const Image<float>& src);
template Image< promote_trait< PixRGB<float> , float>::TP> INST_CLASS lowPass3y(const Image< PixRGB<float> >& src);
template Image< promote_trait<byte, float>::TP> INST_CLASS lowPass5(const Image<byte>& src, const bool go_x , const bool go_y );
template Image< promote_trait< PixRGB<byte> , float>::TP> INST_CLASS lowPass5(const Image< PixRGB<byte> >& src, const bool go_x , const bool go_y );
template Image< promote_trait<float, float>::TP> INST_CLASS lowPass5(const Image<float>& src, const bool go_x , const bool go_y );
template Image< promote_trait< PixRGB<float> , float>::TP> INST_CLASS lowPass5(const Image< PixRGB<float> >& src, const bool go_x , const bool go_y );
template Image< promote_trait<byte, float>::TP> INST_CLASS lowPass5x(const Image<byte>& src);
template Image< promote_trait< PixRGB<byte> , float>::TP> INST_CLASS lowPass5x(const Image< PixRGB<byte> >& src);
template Image< promote_trait<float, float>::TP> INST_CLASS lowPass5x(const Image<float>& src);
template Image< promote_trait< PixRGB<float> , float>::TP> INST_CLASS lowPass5x(const Image< PixRGB<float> >& src);
template Image< promote_trait<byte, float>::TP> INST_CLASS lowPass5y(const Image<byte>& src);
template Image< promote_trait< PixRGB<byte> , float>::TP> INST_CLASS lowPass5y(const Image< PixRGB<byte> >& src);
template Image< promote_trait<float, float>::TP> INST_CLASS lowPass5y(const Image<float>& src);
template Image< promote_trait< PixRGB<float> , float>::TP> INST_CLASS lowPass5y(const Image< PixRGB<float> >& src);
template Image< promote_trait<byte, float>::TP> INST_CLASS lowPass5xDecX(const Image<byte>& src, const int factor );
template Image< promote_trait< PixRGB<byte> , float>::TP> INST_CLASS lowPass5xDecX(const Image< PixRGB<byte> >& src, const int factor );
template Image< promote_trait<float, float>::TP> INST_CLASS lowPass5xDecX(const Image<float>& src, const int factor );
template Image< promote_trait< PixRGB<float> , float>::TP> INST_CLASS lowPass5xDecX(const Image< PixRGB<float> >& src, const int factor );
template Image< promote_trait<byte, float>::TP> INST_CLASS lowPass5yDecY(const Image<byte>& src, const int factor );
template Image< promote_trait< PixRGB<byte> , float>::TP> INST_CLASS lowPass5yDecY(const Image< PixRGB<byte> >& src, const int factor );
template Image< promote_trait<float, float>::TP> INST_CLASS lowPass5yDecY(const Image<float>& src, const int factor );
template Image< promote_trait< PixRGB<float> , float>::TP> INST_CLASS lowPass5yDecY(const Image< PixRGB<float> >& src, const int factor );
template Image< promote_trait<byte, float>::TP> INST_CLASS lowPass9(const Image<byte>& src, const bool go_x , const bool go_y );
template Image< promote_trait< PixRGB<byte> , float>::TP> INST_CLASS lowPass9(const Image< PixRGB<byte> >& src, const bool go_x , const bool go_y );
template Image< promote_trait<float, float>::TP> INST_CLASS lowPass9(const Image<float>& src, const bool go_x , const bool go_y );
template Image< promote_trait< PixRGB<float> , float>::TP> INST_CLASS lowPass9(const Image< PixRGB<float> >& src, const bool go_x , const bool go_y );
template Image< promote_trait<byte, float>::TP> INST_CLASS lowPass9x(const Image<byte>& src);
template Image< promote_trait< PixRGB<byte> , float>::TP> INST_CLASS lowPass9x(const Image< PixRGB<byte> >& src);
template Image< promote_trait<float, float>::TP> INST_CLASS lowPass9x(const Image<float>& src);
template Image< promote_trait< PixRGB<float> , float>::TP> INST_CLASS lowPass9x(const Image< PixRGB<float> >& src);
template Image< promote_trait<byte, float>::TP> INST_CLASS lowPass9y(const Image<byte>& src);
template Image< promote_trait< PixRGB<byte> , float>::TP> INST_CLASS lowPass9y(const Image< PixRGB<byte> >& src);
template Image< promote_trait<float, float>::TP> INST_CLASS lowPass9y(const Image<float>& src);
template Image< promote_trait< PixRGB<float> , float>::TP> INST_CLASS lowPass9y(const Image< PixRGB<float> >& src);
template Image< promote_trait<byte, float>::TP> INST_CLASS lowPass(const int N, const Image<byte>& src, const bool go_x , const bool go_y );
template Image< promote_trait< PixRGB<byte> , float>::TP> INST_CLASS lowPass(const int N, const Image< PixRGB<byte> >& src, const bool go_x , const bool go_y );
template Image< promote_trait<float, float>::TP> INST_CLASS lowPass(const int N, const Image<float>& src, const bool go_x , const bool go_y );
template Image< promote_trait< PixRGB<float> , float>::TP> INST_CLASS lowPass(const int N, const Image< PixRGB<float> >& src, const bool go_x , const bool go_y );
template Image< promote_trait<byte, float>::TP> INST_CLASS lowPassX(const int N, const Image<byte>& src);
template Image< promote_trait< PixRGB<byte> , float>::TP> INST_CLASS lowPassX(const int N, const Image< PixRGB<byte> >& src);
template Image< promote_trait<float, float>::TP> INST_CLASS lowPassX(const int N, const Image<float>& src);
template Image< promote_trait< PixRGB<float> , float>::TP> INST_CLASS lowPassX(const int N, const Image< PixRGB<float> >& src);
template Image< promote_trait<byte, float>::TP> INST_CLASS lowPassY(const int N, const Image<byte>& src);
template Image< promote_trait< PixRGB<byte> , float>::TP> INST_CLASS lowPassY(const int N, const Image< PixRGB<byte> >& src);
template Image< promote_trait<float, float>::TP> INST_CLASS lowPassY(const int N, const Image<float>& src);
template Image< promote_trait< PixRGB<float> , float>::TP> INST_CLASS lowPassY(const int N, const Image< PixRGB<float> >& src);
template Image<byte> INST_CLASS median3x(const Image<byte>& in);
template Image< PixRGB<byte> > INST_CLASS median3x(const Image< PixRGB<byte> >& in);
template Image<float> INST_CLASS median3x(const Image<float>& in);
template Image< PixRGB<float> > INST_CLASS median3x(const Image< PixRGB<float> >& in);
template Image<byte> INST_CLASS median3y(const Image<byte>& in);
template Image< PixRGB<byte> > INST_CLASS median3y(const Image< PixRGB<byte> >& in);
template Image<float> INST_CLASS median3y(const Image<float>& in);
template Image< PixRGB<float> > INST_CLASS median3y(const Image< PixRGB<float> >& in);
template Image<byte> INST_CLASS median3(const Image<byte>& in, bool go_x , bool go_y );
template Image< PixRGB<byte> > INST_CLASS median3(const Image< PixRGB<byte> >& in, bool go_x , bool go_y );
template Image<float> INST_CLASS median3(const Image<float>& in, bool go_x , bool go_y );
template Image< PixRGB<float> > INST_CLASS median3(const Image< PixRGB<float> >& in, bool go_x , bool go_y );
template Image< promote_trait<byte, float>::TP> INST_CLASS convGauss(const Image<byte>& src, const float sigmaX, const float sigmaY, const float threshperc);
template Image< promote_trait< PixRGB<byte> , float>::TP> INST_CLASS convGauss(const Image< PixRGB<byte> >& src, const float sigmaX, const float sigmaY, const float threshperc);
template Image< promote_trait<float, float>::TP> INST_CLASS convGauss(const Image<float>& src, const float sigmaX, const float sigmaY, const float threshperc);
template Image< promote_trait< PixRGB<float> , float>::TP> INST_CLASS convGauss(const Image< PixRGB<float> >& src, const float sigmaX, const float sigmaY, const float threshperc);
#ifdef INST_NAMESPACE
}
#endif
