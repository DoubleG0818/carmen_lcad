/*               -*- mode: c++ -*-

   DO NOT EDIT THIS FILE -- CHANGES WILL BE LOST!

   [Wed Dec 12 09:01:03 BRST 2012] This file was automatically generated by
   applying the script "./devscripts/extract_templates.tcl" to the template
   declarations in source file "src/Video/RgbConversion.H" for types [byte,
   float]
*/
#ifndef INST_CLASS
#  define INST_CLASS
#endif
#ifdef INST_NAMESPACE
namespace INST_NAMESPACE {
#endif
template Image<PixRGB<byte> > INST_CLASS fromRGB(const byte* data, const size_t length, const Dims& dims, const bool byteswap);
template Image<PixRGB<float> > INST_CLASS fromRGB(const float* data, const size_t length, const Dims& dims, const bool byteswap);
template Image<PixRGB<byte> > INST_CLASS fromARGB(const byte* data, const size_t length, const Dims& dims, const bool byteswap);
template Image<PixRGB<float> > INST_CLASS fromARGB(const float* data, const size_t length, const Dims& dims, const bool byteswap);
template Image<PixRGB<byte> > INST_CLASS fromVideoYUV24(const byte* data, const size_t length, const Dims& dims, const bool byteswap);
template Image<PixRGB<float> > INST_CLASS fromVideoYUV24(const float* data, const size_t length, const Dims& dims, const bool byteswap);
template Image<PixRGB<byte> > INST_CLASS fromVideoYUV444(const byte* data, const size_t length, const Dims& dims, const bool byteswap);
template Image<PixRGB<float> > INST_CLASS fromVideoYUV444(const float* data, const size_t length, const Dims& dims, const bool byteswap);
template Image<PixRGB<byte> > INST_CLASS fromVideoYUV422(const byte* data, const size_t length, const Dims& dims, const bool byteswap);
template Image<PixRGB<float> > INST_CLASS fromVideoYUV422(const float* data, const size_t length, const Dims& dims, const bool byteswap);
template Image<PixRGB<byte> > INST_CLASS fromVideoYUV411(const byte* data, const size_t length, const Dims& dims, const bool byteswap);
template Image<PixRGB<float> > INST_CLASS fromVideoYUV411(const float* data, const size_t length, const Dims& dims, const bool byteswap);
template Image<PixRGB<byte> > INST_CLASS fromVideoYUV444P(const byte* data, const size_t length, const Dims& dims);
template Image<PixRGB<float> > INST_CLASS fromVideoYUV444P(const float* data, const size_t length, const Dims& dims);
template Image<PixRGB<byte> > INST_CLASS fromVideoYUV422P(const byte* data, const size_t length, const Dims& dims);
template Image<PixRGB<float> > INST_CLASS fromVideoYUV422P(const float* data, const size_t length, const Dims& dims);
template Image<PixRGB<byte> > INST_CLASS fromVideoYUV411P(const byte* data, const size_t length, const Dims& dims);
template Image<PixRGB<float> > INST_CLASS fromVideoYUV411P(const float* data, const size_t length, const Dims& dims);
template Image<PixRGB<byte> > INST_CLASS fromVideoYUV420P(const byte* data, const size_t length, const Dims& dims);
template Image<PixRGB<float> > INST_CLASS fromVideoYUV420P(const float* data, const size_t length, const Dims& dims);
template Image<PixRGB<byte> > INST_CLASS fromVideoHM12(const byte* data, const size_t length, const Dims& dims);
template Image<PixRGB<float> > INST_CLASS fromVideoHM12(const float* data, const size_t length, const Dims& dims);
template Image<PixRGB<byte> > INST_CLASS fromVideoMJPEG(const byte* data, const size_t length, const Dims& dims, const bool byteswap);
template Image<PixRGB<float> > INST_CLASS fromVideoMJPEG(const float* data, const size_t length, const Dims& dims, const bool byteswap);
template Image<PixRGB<byte> > INST_CLASS fromVideoYUV410P(const byte* data, const size_t length, const Dims& dims);
template Image<PixRGB<float> > INST_CLASS fromVideoYUV410P(const float* data, const size_t length, const Dims& dims);
template Image<PixRGB<byte> > INST_CLASS fromMono(const byte* data, const size_t length, const Dims& dims);
template Image<PixRGB<float> > INST_CLASS fromMono(const float* data, const size_t length, const Dims& dims);
#ifdef INST_NAMESPACE
}
#endif
