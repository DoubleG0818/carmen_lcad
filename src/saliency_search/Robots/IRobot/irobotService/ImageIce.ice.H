// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ImageIce.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __src_Robots_IRobot_irobotService__ImageIce_ice_H__
#define __src_Robots_IRobot_irobotService__ImageIce_ice_H__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace ImageIceMod
{

class ImageShuttle;

}

}

namespace ImageIceMod
{

class ImageShuttle;
bool operator==(const ImageShuttle&, const ImageShuttle&);
bool operator<(const ImageShuttle&, const ImageShuttle&);

}

namespace IceInternal
{

::Ice::Object* upCast(::ImageIceMod::ImageShuttle*);
::IceProxy::Ice::Object* upCast(::IceProxy::ImageIceMod::ImageShuttle*);

}

namespace ImageIceMod
{

typedef ::IceInternal::Handle< ::ImageIceMod::ImageShuttle> ImageShuttlePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::ImageIceMod::ImageShuttle> ImageShuttlePrx;

void __read(::IceInternal::BasicStream*, ImageShuttlePrx&);
void __patch__ImageShuttlePtr(void*, ::Ice::ObjectPtr&);

}

namespace ImageIceMod
{

typedef ::std::vector< ::Ice::Byte> ByteSeq;

struct DimsIce
{
    ::Ice::Int w;
    ::Ice::Int h;

    bool operator==(const DimsIce& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(w != __rhs.w)
        {
            return false;
        }
        if(h != __rhs.h)
        {
            return false;
        }
        return true;
    }

    bool operator<(const DimsIce& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(w < __rhs.w)
        {
            return true;
        }
        else if(__rhs.w < w)
        {
            return false;
        }
        if(h < __rhs.h)
        {
            return true;
        }
        else if(__rhs.h < h)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const DimsIce& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const DimsIce& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const DimsIce& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const DimsIce& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct SensorPose
{
    ::Ice::Int val;
    ::Ice::Float weight;
    ::Ice::Float decay;

    bool operator==(const SensorPose& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(val != __rhs.val)
        {
            return false;
        }
        if(weight != __rhs.weight)
        {
            return false;
        }
        if(decay != __rhs.decay)
        {
            return false;
        }
        return true;
    }

    bool operator<(const SensorPose& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(val < __rhs.val)
        {
            return true;
        }
        else if(__rhs.val < val)
        {
            return false;
        }
        if(weight < __rhs.weight)
        {
            return true;
        }
        else if(__rhs.weight < weight)
        {
            return false;
        }
        if(decay < __rhs.decay)
        {
            return true;
        }
        else if(__rhs.decay < decay)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const SensorPose& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const SensorPose& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const SensorPose& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const SensorPose& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

enum SensorType
{
    PATH,
    SALIENCY,
    PINGER,
    BARBWIRE
};

void __write(::IceInternal::BasicStream*, SensorType);
void __read(::IceInternal::BasicStream*, SensorType&);

struct SensorVote
{
    ::ImageIceMod::SensorType type;
    ::ImageIceMod::SensorPose heading;
    ::ImageIceMod::SensorPose depth;

    bool operator==(const SensorVote& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(heading != __rhs.heading)
        {
            return false;
        }
        if(depth != __rhs.depth)
        {
            return false;
        }
        return true;
    }

    bool operator<(const SensorVote& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(heading < __rhs.heading)
        {
            return true;
        }
        else if(__rhs.heading < heading)
        {
            return false;
        }
        if(depth < __rhs.depth)
        {
            return true;
        }
        else if(__rhs.depth < depth)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const SensorVote& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const SensorVote& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const SensorVote& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const SensorVote& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct WaypointIce
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float depth;
    ::Ice::Float heading;

    bool operator==(const WaypointIce& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(x != __rhs.x)
        {
            return false;
        }
        if(y != __rhs.y)
        {
            return false;
        }
        if(depth != __rhs.depth)
        {
            return false;
        }
        if(heading != __rhs.heading)
        {
            return false;
        }
        return true;
    }

    bool operator<(const WaypointIce& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(x < __rhs.x)
        {
            return true;
        }
        else if(__rhs.x < x)
        {
            return false;
        }
        if(y < __rhs.y)
        {
            return true;
        }
        else if(__rhs.y < y)
        {
            return false;
        }
        if(depth < __rhs.depth)
        {
            return true;
        }
        else if(__rhs.depth < depth)
        {
            return false;
        }
        if(heading < __rhs.heading)
        {
            return true;
        }
        else if(__rhs.heading < heading)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const WaypointIce& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const WaypointIce& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const WaypointIce& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const WaypointIce& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct Point2DIce
{
    ::Ice::Int i;
    ::Ice::Int j;

    bool operator==(const Point2DIce& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(i != __rhs.i)
        {
            return false;
        }
        if(j != __rhs.j)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Point2DIce& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(i < __rhs.i)
        {
            return true;
        }
        else if(__rhs.i < i)
        {
            return false;
        }
        if(j < __rhs.j)
        {
            return true;
        }
        else if(__rhs.j < j)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Point2DIce& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Point2DIce& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Point2DIce& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Point2DIce& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct Point2DIceDouble
{
    ::Ice::Double i;
    ::Ice::Double j;

    bool operator==(const Point2DIceDouble&) const;
    bool operator<(const Point2DIceDouble&) const;
    bool operator!=(const Point2DIceDouble& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Point2DIceDouble& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Point2DIceDouble& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Point2DIceDouble& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct Point3DIce
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;

    bool operator==(const Point3DIce& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(x != __rhs.x)
        {
            return false;
        }
        if(y != __rhs.y)
        {
            return false;
        }
        if(z != __rhs.z)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Point3DIce& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(x < __rhs.x)
        {
            return true;
        }
        else if(__rhs.x < x)
        {
            return false;
        }
        if(y < __rhs.y)
        {
            return true;
        }
        else if(__rhs.y < y)
        {
            return false;
        }
        if(z < __rhs.z)
        {
            return true;
        }
        else if(__rhs.z < z)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Point3DIce& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Point3DIce& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Point3DIce& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Point3DIce& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct RectangleIce
{
    ::ImageIceMod::Point2DIce tl;
    ::ImageIceMod::Point2DIce br;

    bool operator==(const RectangleIce& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(tl != __rhs.tl)
        {
            return false;
        }
        if(br != __rhs.br)
        {
            return false;
        }
        return true;
    }

    bool operator<(const RectangleIce& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(tl < __rhs.tl)
        {
            return true;
        }
        else if(__rhs.tl < tl)
        {
            return false;
        }
        if(br < __rhs.br)
        {
            return true;
        }
        else if(__rhs.br < br)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const RectangleIce& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const RectangleIce& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const RectangleIce& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const RectangleIce& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct QuadrilateralIce
{
    ::ImageIceMod::Point2DIce tl;
    ::ImageIceMod::Point2DIce tr;
    ::ImageIceMod::Point2DIce bl;
    ::ImageIceMod::Point2DIce br;
    ::ImageIceMod::Point2DIce center;
    ::Ice::Float ratio;
    ::Ice::Float angle;

    bool operator==(const QuadrilateralIce& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(tl != __rhs.tl)
        {
            return false;
        }
        if(tr != __rhs.tr)
        {
            return false;
        }
        if(bl != __rhs.bl)
        {
            return false;
        }
        if(br != __rhs.br)
        {
            return false;
        }
        if(center != __rhs.center)
        {
            return false;
        }
        if(ratio != __rhs.ratio)
        {
            return false;
        }
        if(angle != __rhs.angle)
        {
            return false;
        }
        return true;
    }

    bool operator<(const QuadrilateralIce& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(tl < __rhs.tl)
        {
            return true;
        }
        else if(__rhs.tl < tl)
        {
            return false;
        }
        if(tr < __rhs.tr)
        {
            return true;
        }
        else if(__rhs.tr < tr)
        {
            return false;
        }
        if(bl < __rhs.bl)
        {
            return true;
        }
        else if(__rhs.bl < bl)
        {
            return false;
        }
        if(br < __rhs.br)
        {
            return true;
        }
        else if(__rhs.br < br)
        {
            return false;
        }
        if(center < __rhs.center)
        {
            return true;
        }
        else if(__rhs.center < center)
        {
            return false;
        }
        if(ratio < __rhs.ratio)
        {
            return true;
        }
        else if(__rhs.ratio < ratio)
        {
            return false;
        }
        if(angle < __rhs.angle)
        {
            return true;
        }
        else if(__rhs.angle < angle)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const QuadrilateralIce& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const QuadrilateralIce& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const QuadrilateralIce& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const QuadrilateralIce& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct LineIce
{
    ::ImageIceMod::Point2DIce pt1;
    ::ImageIceMod::Point2DIce pt2;
    ::Ice::Float angle;

    bool operator==(const LineIce& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(pt1 != __rhs.pt1)
        {
            return false;
        }
        if(pt2 != __rhs.pt2)
        {
            return false;
        }
        if(angle != __rhs.angle)
        {
            return false;
        }
        return true;
    }

    bool operator<(const LineIce& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(pt1 < __rhs.pt1)
        {
            return true;
        }
        else if(__rhs.pt1 < pt1)
        {
            return false;
        }
        if(pt2 < __rhs.pt2)
        {
            return true;
        }
        else if(__rhs.pt2 < pt2)
        {
            return false;
        }
        if(angle < __rhs.angle)
        {
            return true;
        }
        else if(__rhs.angle < angle)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const LineIce& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const LineIce& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const LineIce& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const LineIce& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct ImageIce
{
    ::ImageIceMod::ByteSeq data;
    ::Ice::Int width;
    ::Ice::Int height;
    ::Ice::Int pixSize;

    bool operator==(const ImageIce& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(data != __rhs.data)
        {
            return false;
        }
        if(width != __rhs.width)
        {
            return false;
        }
        if(height != __rhs.height)
        {
            return false;
        }
        if(pixSize != __rhs.pixSize)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ImageIce& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(data < __rhs.data)
        {
            return true;
        }
        else if(__rhs.data < data)
        {
            return false;
        }
        if(width < __rhs.width)
        {
            return true;
        }
        else if(__rhs.width < width)
        {
            return false;
        }
        if(height < __rhs.height)
        {
            return true;
        }
        else if(__rhs.height < height)
        {
            return false;
        }
        if(pixSize < __rhs.pixSize)
        {
            return true;
        }
        else if(__rhs.pixSize < pixSize)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ImageIce& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ImageIce& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ImageIce& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ImageIce& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::ImageIceMod::ImageIce> ImageIceSeq;
void __writeImageIceSeq(::IceInternal::BasicStream*, const ::ImageIceMod::ImageIce*, const ::ImageIceMod::ImageIce*);
void __readImageIceSeq(::IceInternal::BasicStream*, ImageIceSeq&);

}

namespace ImageIceMod
{

class Callback_ImageShuttle_transferImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImageShuttle_transferImage_Base> Callback_ImageShuttle_transferImagePtr;

}

namespace IceProxy
{

namespace ImageIceMod
{

class ImageShuttle : virtual public ::IceProxy::Ice::Object
{
public:

    void transferImage(const ::ImageIceMod::ImageIce& i)
    {
        transferImage(i, 0);
    }
    void transferImage(const ::ImageIceMod::ImageIce& i, const ::Ice::Context& __ctx)
    {
        transferImage(i, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_transferImage(const ::ImageIceMod::ImageIce& i)
    {
        return begin_transferImage(i, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_transferImage(const ::ImageIceMod::ImageIce& i, const ::Ice::Context& __ctx)
    {
        return begin_transferImage(i, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_transferImage(const ::ImageIceMod::ImageIce& i, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transferImage(i, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_transferImage(const ::ImageIceMod::ImageIce& i, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transferImage(i, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_transferImage(const ::ImageIceMod::ImageIce& i, const ::ImageIceMod::Callback_ImageShuttle_transferImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transferImage(i, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_transferImage(const ::ImageIceMod::ImageIce& i, const ::Ice::Context& __ctx, const ::ImageIceMod::Callback_ImageShuttle_transferImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_transferImage(i, &__ctx, __del, __cookie);
    }

    void end_transferImage(const ::Ice::AsyncResultPtr&);

private:

    void transferImage(const ::ImageIceMod::ImageIce&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_transferImage(const ::ImageIceMod::ImageIce&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    ::IceInternal::ProxyHandle<ImageShuttle> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }

    ::IceInternal::ProxyHandle<ImageShuttle> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }

    ::IceInternal::ProxyHandle<ImageShuttle> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }

    ::IceInternal::ProxyHandle<ImageShuttle> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }

    ::IceInternal::ProxyHandle<ImageShuttle> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }

    ::IceInternal::ProxyHandle<ImageShuttle> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }

    ::IceInternal::ProxyHandle<ImageShuttle> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }

    ::IceInternal::ProxyHandle<ImageShuttle> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }

    ::IceInternal::ProxyHandle<ImageShuttle> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }

    ::IceInternal::ProxyHandle<ImageShuttle> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }

    ::IceInternal::ProxyHandle<ImageShuttle> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }

    ::IceInternal::ProxyHandle<ImageShuttle> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }

    ::IceInternal::ProxyHandle<ImageShuttle> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }

    ::IceInternal::ProxyHandle<ImageShuttle> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }

    ::IceInternal::ProxyHandle<ImageShuttle> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }

    ::IceInternal::ProxyHandle<ImageShuttle> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }

    ::IceInternal::ProxyHandle<ImageShuttle> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }

    ::IceInternal::ProxyHandle<ImageShuttle> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }

    ::IceInternal::ProxyHandle<ImageShuttle> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ImageShuttle*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<ImageShuttle*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }

    static const ::std::string& ice_staticId();

private:

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace ImageIceMod
{

class ImageShuttle : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void transferImage(const ::ImageIceMod::ImageIce&, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace ImageIceMod
{

class ImageShuttle : virtual public ::IceDelegate::ImageIceMod::ImageShuttle,
                     virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void transferImage(const ::ImageIceMod::ImageIce&, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace ImageIceMod
{

class ImageShuttle : virtual public ::IceDelegate::ImageIceMod::ImageShuttle,
                     virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void transferImage(const ::ImageIceMod::ImageIce&, const ::Ice::Context*);
};

}

}

namespace ImageIceMod
{

class ImageShuttle : virtual public ::Ice::Object
{
public:

    typedef ImageShuttlePrx ProxyType;
    typedef ImageShuttlePtr PointerType;

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void transferImage(const ::ImageIceMod::ImageIce&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___transferImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const ImageShuttle& l, const ImageShuttle& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ImageShuttle& l, const ImageShuttle& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace ImageIceMod
{

template<class T>
class CallbackNC_ImageShuttle_transferImage : public Callback_ImageShuttle_transferImage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ImageShuttle_transferImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ImageShuttle_transferImagePtr
newCallback_ImageShuttle_transferImage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageShuttle_transferImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImageShuttle_transferImagePtr
newCallback_ImageShuttle_transferImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageShuttle_transferImage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ImageShuttle_transferImagePtr
newCallback_ImageShuttle_transferImage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageShuttle_transferImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImageShuttle_transferImagePtr
newCallback_ImageShuttle_transferImage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageShuttle_transferImage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImageShuttle_transferImage : public Callback_ImageShuttle_transferImage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ImageShuttle_transferImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ImageShuttle_transferImagePtr
newCallback_ImageShuttle_transferImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageShuttle_transferImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImageShuttle_transferImagePtr
newCallback_ImageShuttle_transferImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageShuttle_transferImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ImageShuttle_transferImagePtr
newCallback_ImageShuttle_transferImage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageShuttle_transferImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImageShuttle_transferImagePtr
newCallback_ImageShuttle_transferImage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageShuttle_transferImage<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
