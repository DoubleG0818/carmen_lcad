// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `IRobot.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __src_Robots_IRobot_irobotService__IRobot_ice_H__
#define __src_Robots_IRobot_irobotService__IRobot_ice_H__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/ImageIce.ice.H>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Robots
{

class IRobot;

}

}

namespace Robots
{

class IRobot;
bool operator==(const IRobot&, const IRobot&);
bool operator<(const IRobot&, const IRobot&);

}

namespace IceInternal
{

::Ice::Object* upCast(::Robots::IRobot*);
::IceProxy::Ice::Object* upCast(::IceProxy::Robots::IRobot*);

}

namespace Robots
{

typedef ::IceInternal::Handle< ::Robots::IRobot> IRobotPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Robots::IRobot> IRobotPrx;

void __read(::IceInternal::BasicStream*, IRobotPrx&);
void __patch__IRobotPtr(void*, ::Ice::ObjectPtr&);

}

namespace Robots
{

enum IRobotModes
{
    SafeMode,
    FullMode,
    SpotMode,
    CoverMode,
    CoverAndDockMode
};

void __write(::IceInternal::BasicStream*, IRobotModes);
void __read(::IceInternal::BasicStream*, IRobotModes&);

}

namespace Robots
{

class Callback_IRobot_getSpeed_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRobot_getSpeed_Base> Callback_IRobot_getSpeedPtr;

class Callback_IRobot_setSpeed_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRobot_setSpeed_Base> Callback_IRobot_setSpeedPtr;

class Callback_IRobot_getSteering_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRobot_getSteering_Base> Callback_IRobot_getSteeringPtr;

class Callback_IRobot_setSteering_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRobot_setSteering_Base> Callback_IRobot_setSteeringPtr;

class Callback_IRobot_getImageSensor_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRobot_getImageSensor_Base> Callback_IRobot_getImageSensorPtr;

class Callback_IRobot_getImageSensorDims_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRobot_getImageSensorDims_Base> Callback_IRobot_getImageSensorDimsPtr;

class Callback_IRobot_getSensorValue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRobot_getSensorValue_Base> Callback_IRobot_getSensorValuePtr;

class Callback_IRobot_getSensors_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRobot_getSensors_Base> Callback_IRobot_getSensorsPtr;

class Callback_IRobot_getDistanceAngle_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRobot_getDistanceAngle_Base> Callback_IRobot_getDistanceAnglePtr;

class Callback_IRobot_motorsOff_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRobot_motorsOff_Base> Callback_IRobot_motorsOffPtr;

class Callback_IRobot_setMotor_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRobot_setMotor_Base> Callback_IRobot_setMotorPtr;

class Callback_IRobot_sendRawCmd_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRobot_sendRawCmd_Base> Callback_IRobot_sendRawCmdPtr;

class Callback_IRobot_playSong_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRobot_playSong_Base> Callback_IRobot_playSongPtr;

class Callback_IRobot_sendStart_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRobot_sendStart_Base> Callback_IRobot_sendStartPtr;

class Callback_IRobot_setMode_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRobot_setMode_Base> Callback_IRobot_setModePtr;

class Callback_IRobot_setDemo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRobot_setDemo_Base> Callback_IRobot_setDemoPtr;

class Callback_IRobot_setLED_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRobot_setLED_Base> Callback_IRobot_setLEDPtr;

class Callback_IRobot_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRobot_shutdown_Base> Callback_IRobot_shutdownPtr;

}

namespace IceProxy
{

namespace Robots
{

class IRobot : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Float getSpeed()
    {
        return getSpeed(0);
    }
    ::Ice::Float getSpeed(const ::Ice::Context& __ctx)
    {
        return getSpeed(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getSpeed()
    {
        return begin_getSpeed(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSpeed(const ::Ice::Context& __ctx)
    {
        return begin_getSpeed(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSpeed(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSpeed(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSpeed(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSpeed(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSpeed(const ::Robots::Callback_IRobot_getSpeedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSpeed(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSpeed(const ::Ice::Context& __ctx, const ::Robots::Callback_IRobot_getSpeedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSpeed(&__ctx, __del, __cookie);
    }

    ::Ice::Float end_getSpeed(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::Float getSpeed(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSpeed(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    ::Ice::Short setSpeed(::Ice::Float speed)
    {
        return setSpeed(speed, 0);
    }
    ::Ice::Short setSpeed(::Ice::Float speed, const ::Ice::Context& __ctx)
    {
        return setSpeed(speed, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setSpeed(::Ice::Float speed)
    {
        return begin_setSpeed(speed, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSpeed(::Ice::Float speed, const ::Ice::Context& __ctx)
    {
        return begin_setSpeed(speed, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSpeed(::Ice::Float speed, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSpeed(speed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSpeed(::Ice::Float speed, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSpeed(speed, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSpeed(::Ice::Float speed, const ::Robots::Callback_IRobot_setSpeedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSpeed(speed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSpeed(::Ice::Float speed, const ::Ice::Context& __ctx, const ::Robots::Callback_IRobot_setSpeedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSpeed(speed, &__ctx, __del, __cookie);
    }

    ::Ice::Short end_setSpeed(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::Short setSpeed(::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSpeed(::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    ::Ice::Float getSteering()
    {
        return getSteering(0);
    }
    ::Ice::Float getSteering(const ::Ice::Context& __ctx)
    {
        return getSteering(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getSteering()
    {
        return begin_getSteering(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSteering(const ::Ice::Context& __ctx)
    {
        return begin_getSteering(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSteering(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSteering(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSteering(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSteering(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSteering(const ::Robots::Callback_IRobot_getSteeringPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSteering(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSteering(const ::Ice::Context& __ctx, const ::Robots::Callback_IRobot_getSteeringPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSteering(&__ctx, __del, __cookie);
    }

    ::Ice::Float end_getSteering(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::Float getSteering(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSteering(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    ::Ice::Short setSteering(::Ice::Float steeringPos)
    {
        return setSteering(steeringPos, 0);
    }
    ::Ice::Short setSteering(::Ice::Float steeringPos, const ::Ice::Context& __ctx)
    {
        return setSteering(steeringPos, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setSteering(::Ice::Float steeringPos)
    {
        return begin_setSteering(steeringPos, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSteering(::Ice::Float steeringPos, const ::Ice::Context& __ctx)
    {
        return begin_setSteering(steeringPos, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSteering(::Ice::Float steeringPos, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSteering(steeringPos, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSteering(::Ice::Float steeringPos, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSteering(steeringPos, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSteering(::Ice::Float steeringPos, const ::Robots::Callback_IRobot_setSteeringPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSteering(steeringPos, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSteering(::Ice::Float steeringPos, const ::Ice::Context& __ctx, const ::Robots::Callback_IRobot_setSteeringPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSteering(steeringPos, &__ctx, __del, __cookie);
    }

    ::Ice::Short end_setSteering(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::Short setSteering(::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSteering(::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    ::ImageIceMod::ImageIce getImageSensor(::Ice::Short i, bool useColor)
    {
        return getImageSensor(i, useColor, 0);
    }
    ::ImageIceMod::ImageIce getImageSensor(::Ice::Short i, bool useColor, const ::Ice::Context& __ctx)
    {
        return getImageSensor(i, useColor, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getImageSensor(::Ice::Short i, bool useColor)
    {
        return begin_getImageSensor(i, useColor, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImageSensor(::Ice::Short i, bool useColor, const ::Ice::Context& __ctx)
    {
        return begin_getImageSensor(i, useColor, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImageSensor(::Ice::Short i, bool useColor, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageSensor(i, useColor, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageSensor(::Ice::Short i, bool useColor, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageSensor(i, useColor, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageSensor(::Ice::Short i, bool useColor, const ::Robots::Callback_IRobot_getImageSensorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageSensor(i, useColor, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageSensor(::Ice::Short i, bool useColor, const ::Ice::Context& __ctx, const ::Robots::Callback_IRobot_getImageSensorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageSensor(i, useColor, &__ctx, __del, __cookie);
    }

    ::ImageIceMod::ImageIce end_getImageSensor(const ::Ice::AsyncResultPtr&);

private:

    ::ImageIceMod::ImageIce getImageSensor(::Ice::Short, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getImageSensor(::Ice::Short, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    ::ImageIceMod::DimsIce getImageSensorDims(::Ice::Short i)
    {
        return getImageSensorDims(i, 0);
    }
    ::ImageIceMod::DimsIce getImageSensorDims(::Ice::Short i, const ::Ice::Context& __ctx)
    {
        return getImageSensorDims(i, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getImageSensorDims(::Ice::Short i)
    {
        return begin_getImageSensorDims(i, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImageSensorDims(::Ice::Short i, const ::Ice::Context& __ctx)
    {
        return begin_getImageSensorDims(i, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImageSensorDims(::Ice::Short i, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageSensorDims(i, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageSensorDims(::Ice::Short i, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageSensorDims(i, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageSensorDims(::Ice::Short i, const ::Robots::Callback_IRobot_getImageSensorDimsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageSensorDims(i, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageSensorDims(::Ice::Short i, const ::Ice::Context& __ctx, const ::Robots::Callback_IRobot_getImageSensorDimsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageSensorDims(i, &__ctx, __del, __cookie);
    }

    ::ImageIceMod::DimsIce end_getImageSensorDims(const ::Ice::AsyncResultPtr&);

private:

    ::ImageIceMod::DimsIce getImageSensorDims(::Ice::Short, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getImageSensorDims(::Ice::Short, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    ::Ice::Float getSensorValue(::Ice::Short i)
    {
        return getSensorValue(i, 0);
    }
    ::Ice::Float getSensorValue(::Ice::Short i, const ::Ice::Context& __ctx)
    {
        return getSensorValue(i, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getSensorValue(::Ice::Short i)
    {
        return begin_getSensorValue(i, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSensorValue(::Ice::Short i, const ::Ice::Context& __ctx)
    {
        return begin_getSensorValue(i, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSensorValue(::Ice::Short i, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSensorValue(i, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSensorValue(::Ice::Short i, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSensorValue(i, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSensorValue(::Ice::Short i, const ::Robots::Callback_IRobot_getSensorValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSensorValue(i, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSensorValue(::Ice::Short i, const ::Ice::Context& __ctx, const ::Robots::Callback_IRobot_getSensorValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSensorValue(i, &__ctx, __del, __cookie);
    }

    ::Ice::Float end_getSensorValue(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::Float getSensorValue(::Ice::Short, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSensorValue(::Ice::Short, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    bool getSensors(::Ice::Float& xPos, ::Ice::Float& yPos, ::Ice::Float& ori)
    {
        return getSensors(xPos, yPos, ori, 0);
    }
    bool getSensors(::Ice::Float& xPos, ::Ice::Float& yPos, ::Ice::Float& ori, const ::Ice::Context& __ctx)
    {
        return getSensors(xPos, yPos, ori, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getSensors()
    {
        return begin_getSensors(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSensors(const ::Ice::Context& __ctx)
    {
        return begin_getSensors(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSensors(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSensors(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSensors(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSensors(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSensors(const ::Robots::Callback_IRobot_getSensorsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSensors(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSensors(const ::Ice::Context& __ctx, const ::Robots::Callback_IRobot_getSensorsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSensors(&__ctx, __del, __cookie);
    }

    bool end_getSensors(::Ice::Float& xPos, ::Ice::Float& yPos, ::Ice::Float& ori, const ::Ice::AsyncResultPtr&);

private:

    bool getSensors(::Ice::Float&, ::Ice::Float&, ::Ice::Float&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSensors(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    bool getDistanceAngle(::Ice::Float& dist, ::Ice::Float& ang)
    {
        return getDistanceAngle(dist, ang, 0);
    }
    bool getDistanceAngle(::Ice::Float& dist, ::Ice::Float& ang, const ::Ice::Context& __ctx)
    {
        return getDistanceAngle(dist, ang, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getDistanceAngle()
    {
        return begin_getDistanceAngle(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDistanceAngle(const ::Ice::Context& __ctx)
    {
        return begin_getDistanceAngle(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDistanceAngle(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDistanceAngle(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDistanceAngle(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDistanceAngle(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDistanceAngle(const ::Robots::Callback_IRobot_getDistanceAnglePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDistanceAngle(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDistanceAngle(const ::Ice::Context& __ctx, const ::Robots::Callback_IRobot_getDistanceAnglePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDistanceAngle(&__ctx, __del, __cookie);
    }

    bool end_getDistanceAngle(::Ice::Float& dist, ::Ice::Float& ang, const ::Ice::AsyncResultPtr&);

private:

    bool getDistanceAngle(::Ice::Float&, ::Ice::Float&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDistanceAngle(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    void motorsOff(::Ice::Short i)
    {
        motorsOff(i, 0);
    }
    void motorsOff(::Ice::Short i, const ::Ice::Context& __ctx)
    {
        motorsOff(i, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_motorsOff(::Ice::Short i)
    {
        return begin_motorsOff(i, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_motorsOff(::Ice::Short i, const ::Ice::Context& __ctx)
    {
        return begin_motorsOff(i, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_motorsOff(::Ice::Short i, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_motorsOff(i, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_motorsOff(::Ice::Short i, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_motorsOff(i, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_motorsOff(::Ice::Short i, const ::Robots::Callback_IRobot_motorsOffPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_motorsOff(i, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_motorsOff(::Ice::Short i, const ::Ice::Context& __ctx, const ::Robots::Callback_IRobot_motorsOffPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_motorsOff(i, &__ctx, __del, __cookie);
    }

    void end_motorsOff(const ::Ice::AsyncResultPtr&);

private:

    void motorsOff(::Ice::Short, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_motorsOff(::Ice::Short, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    void setMotor(::Ice::Short i, ::Ice::Float val)
    {
        setMotor(i, val, 0);
    }
    void setMotor(::Ice::Short i, ::Ice::Float val, const ::Ice::Context& __ctx)
    {
        setMotor(i, val, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setMotor(::Ice::Short i, ::Ice::Float val)
    {
        return begin_setMotor(i, val, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMotor(::Ice::Short i, ::Ice::Float val, const ::Ice::Context& __ctx)
    {
        return begin_setMotor(i, val, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMotor(::Ice::Short i, ::Ice::Float val, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMotor(i, val, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMotor(::Ice::Short i, ::Ice::Float val, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMotor(i, val, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMotor(::Ice::Short i, ::Ice::Float val, const ::Robots::Callback_IRobot_setMotorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMotor(i, val, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMotor(::Ice::Short i, ::Ice::Float val, const ::Ice::Context& __ctx, const ::Robots::Callback_IRobot_setMotorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMotor(i, val, &__ctx, __del, __cookie);
    }

    void end_setMotor(const ::Ice::AsyncResultPtr&);

private:

    void setMotor(::Ice::Short, ::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setMotor(::Ice::Short, ::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    ::Ice::Short sendRawCmd(const ::std::string& data)
    {
        return sendRawCmd(data, 0);
    }
    ::Ice::Short sendRawCmd(const ::std::string& data, const ::Ice::Context& __ctx)
    {
        return sendRawCmd(data, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_sendRawCmd(const ::std::string& data)
    {
        return begin_sendRawCmd(data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendRawCmd(const ::std::string& data, const ::Ice::Context& __ctx)
    {
        return begin_sendRawCmd(data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendRawCmd(const ::std::string& data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendRawCmd(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendRawCmd(const ::std::string& data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendRawCmd(data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendRawCmd(const ::std::string& data, const ::Robots::Callback_IRobot_sendRawCmdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendRawCmd(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendRawCmd(const ::std::string& data, const ::Ice::Context& __ctx, const ::Robots::Callback_IRobot_sendRawCmdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendRawCmd(data, &__ctx, __del, __cookie);
    }

    ::Ice::Short end_sendRawCmd(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::Short sendRawCmd(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendRawCmd(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    void playSong(::Ice::Short song)
    {
        playSong(song, 0);
    }
    void playSong(::Ice::Short song, const ::Ice::Context& __ctx)
    {
        playSong(song, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_playSong(::Ice::Short song)
    {
        return begin_playSong(song, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_playSong(::Ice::Short song, const ::Ice::Context& __ctx)
    {
        return begin_playSong(song, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_playSong(::Ice::Short song, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_playSong(song, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_playSong(::Ice::Short song, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_playSong(song, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_playSong(::Ice::Short song, const ::Robots::Callback_IRobot_playSongPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_playSong(song, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_playSong(::Ice::Short song, const ::Ice::Context& __ctx, const ::Robots::Callback_IRobot_playSongPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_playSong(song, &__ctx, __del, __cookie);
    }

    void end_playSong(const ::Ice::AsyncResultPtr&);

private:

    void playSong(::Ice::Short, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_playSong(::Ice::Short, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    void sendStart()
    {
        sendStart(0);
    }
    void sendStart(const ::Ice::Context& __ctx)
    {
        sendStart(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_sendStart()
    {
        return begin_sendStart(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendStart(const ::Ice::Context& __ctx)
    {
        return begin_sendStart(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendStart(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendStart(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendStart(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendStart(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendStart(const ::Robots::Callback_IRobot_sendStartPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendStart(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendStart(const ::Ice::Context& __ctx, const ::Robots::Callback_IRobot_sendStartPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendStart(&__ctx, __del, __cookie);
    }

    void end_sendStart(const ::Ice::AsyncResultPtr&);

private:

    void sendStart(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendStart(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    void setMode(::Robots::IRobotModes mode)
    {
        setMode(mode, 0);
    }
    void setMode(::Robots::IRobotModes mode, const ::Ice::Context& __ctx)
    {
        setMode(mode, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setMode(::Robots::IRobotModes mode)
    {
        return begin_setMode(mode, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMode(::Robots::IRobotModes mode, const ::Ice::Context& __ctx)
    {
        return begin_setMode(mode, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMode(::Robots::IRobotModes mode, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMode(mode, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMode(::Robots::IRobotModes mode, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMode(mode, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMode(::Robots::IRobotModes mode, const ::Robots::Callback_IRobot_setModePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMode(mode, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMode(::Robots::IRobotModes mode, const ::Ice::Context& __ctx, const ::Robots::Callback_IRobot_setModePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMode(mode, &__ctx, __del, __cookie);
    }

    void end_setMode(const ::Ice::AsyncResultPtr&);

private:

    void setMode(::Robots::IRobotModes, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setMode(::Robots::IRobotModes, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    void setDemo(::Ice::Short demo)
    {
        setDemo(demo, 0);
    }
    void setDemo(::Ice::Short demo, const ::Ice::Context& __ctx)
    {
        setDemo(demo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setDemo(::Ice::Short demo)
    {
        return begin_setDemo(demo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDemo(::Ice::Short demo, const ::Ice::Context& __ctx)
    {
        return begin_setDemo(demo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDemo(::Ice::Short demo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDemo(demo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDemo(::Ice::Short demo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDemo(demo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDemo(::Ice::Short demo, const ::Robots::Callback_IRobot_setDemoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDemo(demo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDemo(::Ice::Short demo, const ::Ice::Context& __ctx, const ::Robots::Callback_IRobot_setDemoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDemo(demo, &__ctx, __del, __cookie);
    }

    void end_setDemo(const ::Ice::AsyncResultPtr&);

private:

    void setDemo(::Ice::Short, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDemo(::Ice::Short, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    void setLED(::Ice::Short led, ::Ice::Short color, ::Ice::Short intensity)
    {
        setLED(led, color, intensity, 0);
    }
    void setLED(::Ice::Short led, ::Ice::Short color, ::Ice::Short intensity, const ::Ice::Context& __ctx)
    {
        setLED(led, color, intensity, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setLED(::Ice::Short led, ::Ice::Short color, ::Ice::Short intensity)
    {
        return begin_setLED(led, color, intensity, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setLED(::Ice::Short led, ::Ice::Short color, ::Ice::Short intensity, const ::Ice::Context& __ctx)
    {
        return begin_setLED(led, color, intensity, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setLED(::Ice::Short led, ::Ice::Short color, ::Ice::Short intensity, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLED(led, color, intensity, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLED(::Ice::Short led, ::Ice::Short color, ::Ice::Short intensity, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLED(led, color, intensity, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLED(::Ice::Short led, ::Ice::Short color, ::Ice::Short intensity, const ::Robots::Callback_IRobot_setLEDPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLED(led, color, intensity, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLED(::Ice::Short led, ::Ice::Short color, ::Ice::Short intensity, const ::Ice::Context& __ctx, const ::Robots::Callback_IRobot_setLEDPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLED(led, color, intensity, &__ctx, __del, __cookie);
    }

    void end_setLED(const ::Ice::AsyncResultPtr&);

private:

    void setLED(::Ice::Short, ::Ice::Short, ::Ice::Short, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setLED(::Ice::Short, ::Ice::Short, ::Ice::Short, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Robots::Callback_IRobot_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Robots::Callback_IRobot_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);

private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

public:

    ::IceInternal::ProxyHandle<IRobot> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }

    ::IceInternal::ProxyHandle<IRobot> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }

    ::IceInternal::ProxyHandle<IRobot> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }

    ::IceInternal::ProxyHandle<IRobot> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }

    ::IceInternal::ProxyHandle<IRobot> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }

    ::IceInternal::ProxyHandle<IRobot> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }

    ::IceInternal::ProxyHandle<IRobot> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }

    ::IceInternal::ProxyHandle<IRobot> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }

    ::IceInternal::ProxyHandle<IRobot> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }

    ::IceInternal::ProxyHandle<IRobot> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }

    ::IceInternal::ProxyHandle<IRobot> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }

    ::IceInternal::ProxyHandle<IRobot> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }

    ::IceInternal::ProxyHandle<IRobot> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }

    ::IceInternal::ProxyHandle<IRobot> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }

    ::IceInternal::ProxyHandle<IRobot> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }

    ::IceInternal::ProxyHandle<IRobot> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }

    ::IceInternal::ProxyHandle<IRobot> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }

    ::IceInternal::ProxyHandle<IRobot> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }

    ::IceInternal::ProxyHandle<IRobot> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IRobot*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<IRobot*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }

    static const ::std::string& ice_staticId();

private:

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Robots
{

class IRobot : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Float getSpeed(const ::Ice::Context*) = 0;

    virtual ::Ice::Short setSpeed(::Ice::Float, const ::Ice::Context*) = 0;

    virtual ::Ice::Float getSteering(const ::Ice::Context*) = 0;

    virtual ::Ice::Short setSteering(::Ice::Float, const ::Ice::Context*) = 0;

    virtual ::ImageIceMod::ImageIce getImageSensor(::Ice::Short, bool, const ::Ice::Context*) = 0;

    virtual ::ImageIceMod::DimsIce getImageSensorDims(::Ice::Short, const ::Ice::Context*) = 0;

    virtual ::Ice::Float getSensorValue(::Ice::Short, const ::Ice::Context*) = 0;

    virtual bool getSensors(::Ice::Float&, ::Ice::Float&, ::Ice::Float&, const ::Ice::Context*) = 0;

    virtual bool getDistanceAngle(::Ice::Float&, ::Ice::Float&, const ::Ice::Context*) = 0;

    virtual void motorsOff(::Ice::Short, const ::Ice::Context*) = 0;

    virtual void setMotor(::Ice::Short, ::Ice::Float, const ::Ice::Context*) = 0;

    virtual ::Ice::Short sendRawCmd(const ::std::string&, const ::Ice::Context*) = 0;

    virtual void playSong(::Ice::Short, const ::Ice::Context*) = 0;

    virtual void sendStart(const ::Ice::Context*) = 0;

    virtual void setMode(::Robots::IRobotModes, const ::Ice::Context*) = 0;

    virtual void setDemo(::Ice::Short, const ::Ice::Context*) = 0;

    virtual void setLED(::Ice::Short, ::Ice::Short, ::Ice::Short, const ::Ice::Context*) = 0;

    virtual void shutdown(const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace Robots
{

class IRobot : virtual public ::IceDelegate::Robots::IRobot,
               virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Float getSpeed(const ::Ice::Context*);

    virtual ::Ice::Short setSpeed(::Ice::Float, const ::Ice::Context*);

    virtual ::Ice::Float getSteering(const ::Ice::Context*);

    virtual ::Ice::Short setSteering(::Ice::Float, const ::Ice::Context*);

    virtual ::ImageIceMod::ImageIce getImageSensor(::Ice::Short, bool, const ::Ice::Context*);

    virtual ::ImageIceMod::DimsIce getImageSensorDims(::Ice::Short, const ::Ice::Context*);

    virtual ::Ice::Float getSensorValue(::Ice::Short, const ::Ice::Context*);

    virtual bool getSensors(::Ice::Float&, ::Ice::Float&, ::Ice::Float&, const ::Ice::Context*);

    virtual bool getDistanceAngle(::Ice::Float&, ::Ice::Float&, const ::Ice::Context*);

    virtual void motorsOff(::Ice::Short, const ::Ice::Context*);

    virtual void setMotor(::Ice::Short, ::Ice::Float, const ::Ice::Context*);

    virtual ::Ice::Short sendRawCmd(const ::std::string&, const ::Ice::Context*);

    virtual void playSong(::Ice::Short, const ::Ice::Context*);

    virtual void sendStart(const ::Ice::Context*);

    virtual void setMode(::Robots::IRobotModes, const ::Ice::Context*);

    virtual void setDemo(::Ice::Short, const ::Ice::Context*);

    virtual void setLED(::Ice::Short, ::Ice::Short, ::Ice::Short, const ::Ice::Context*);

    virtual void shutdown(const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace Robots
{

class IRobot : virtual public ::IceDelegate::Robots::IRobot,
               virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Float getSpeed(const ::Ice::Context*);

    virtual ::Ice::Short setSpeed(::Ice::Float, const ::Ice::Context*);

    virtual ::Ice::Float getSteering(const ::Ice::Context*);

    virtual ::Ice::Short setSteering(::Ice::Float, const ::Ice::Context*);

    virtual ::ImageIceMod::ImageIce getImageSensor(::Ice::Short, bool, const ::Ice::Context*);

    virtual ::ImageIceMod::DimsIce getImageSensorDims(::Ice::Short, const ::Ice::Context*);

    virtual ::Ice::Float getSensorValue(::Ice::Short, const ::Ice::Context*);

    virtual bool getSensors(::Ice::Float&, ::Ice::Float&, ::Ice::Float&, const ::Ice::Context*);

    virtual bool getDistanceAngle(::Ice::Float&, ::Ice::Float&, const ::Ice::Context*);

    virtual void motorsOff(::Ice::Short, const ::Ice::Context*);

    virtual void setMotor(::Ice::Short, ::Ice::Float, const ::Ice::Context*);

    virtual ::Ice::Short sendRawCmd(const ::std::string&, const ::Ice::Context*);

    virtual void playSong(::Ice::Short, const ::Ice::Context*);

    virtual void sendStart(const ::Ice::Context*);

    virtual void setMode(::Robots::IRobotModes, const ::Ice::Context*);

    virtual void setDemo(::Ice::Short, const ::Ice::Context*);

    virtual void setLED(::Ice::Short, ::Ice::Short, ::Ice::Short, const ::Ice::Context*);

    virtual void shutdown(const ::Ice::Context*);
};

}

}

namespace Robots
{

class IRobot : virtual public ::Ice::Object
{
public:

    typedef IRobotPrx ProxyType;
    typedef IRobotPtr PointerType;

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Float getSpeed(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSpeed(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Short setSpeed(::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSpeed(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Float getSteering(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSteering(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Short setSteering(::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSteering(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::ImageIceMod::ImageIce getImageSensor(::Ice::Short, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getImageSensor(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::ImageIceMod::DimsIce getImageSensorDims(::Ice::Short, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getImageSensorDims(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Float getSensorValue(::Ice::Short, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSensorValue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool getSensors(::Ice::Float&, ::Ice::Float&, ::Ice::Float&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSensors(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool getDistanceAngle(::Ice::Float&, ::Ice::Float&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDistanceAngle(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void motorsOff(::Ice::Short, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___motorsOff(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setMotor(::Ice::Short, ::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setMotor(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Short sendRawCmd(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendRawCmd(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void playSong(::Ice::Short, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___playSong(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void sendStart(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendStart(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setMode(::Robots::IRobotModes, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setMode(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDemo(::Ice::Short, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDemo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setLED(::Ice::Short, ::Ice::Short, ::Ice::Short, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setLED(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const IRobot& l, const IRobot& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IRobot& l, const IRobot& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Robots
{

template<class T>
class CallbackNC_IRobot_getSpeed : public Callback_IRobot_getSpeed_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Float);

    CallbackNC_IRobot_getSpeed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_getSpeed(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IRobot_getSpeedPtr
newCallback_IRobot_getSpeed(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_getSpeed<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_getSpeedPtr
newCallback_IRobot_getSpeed(T* instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_getSpeed<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IRobot_getSpeed : public Callback_IRobot_getSpeed_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Float, const CT&);

    Callback_IRobot_getSpeed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_getSpeed(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IRobot_getSpeedPtr
newCallback_IRobot_getSpeed(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_getSpeed<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_getSpeedPtr
newCallback_IRobot_getSpeed(T* instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_getSpeed<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IRobot_setSpeed : public Callback_IRobot_setSpeed_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Short);

    CallbackNC_IRobot_setSpeed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::Ice::Short __ret;
        try
        {
            __ret = __proxy->end_setSpeed(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IRobot_setSpeedPtr
newCallback_IRobot_setSpeed(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Short), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setSpeed<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_setSpeedPtr
newCallback_IRobot_setSpeed(T* instance, void (T::*cb)(::Ice::Short), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setSpeed<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IRobot_setSpeed : public Callback_IRobot_setSpeed_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Short, const CT&);

    Callback_IRobot_setSpeed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::Ice::Short __ret;
        try
        {
            __ret = __proxy->end_setSpeed(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IRobot_setSpeedPtr
newCallback_IRobot_setSpeed(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Short, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setSpeed<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_setSpeedPtr
newCallback_IRobot_setSpeed(T* instance, void (T::*cb)(::Ice::Short, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setSpeed<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IRobot_getSteering : public Callback_IRobot_getSteering_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Float);

    CallbackNC_IRobot_getSteering(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_getSteering(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IRobot_getSteeringPtr
newCallback_IRobot_getSteering(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_getSteering<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_getSteeringPtr
newCallback_IRobot_getSteering(T* instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_getSteering<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IRobot_getSteering : public Callback_IRobot_getSteering_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Float, const CT&);

    Callback_IRobot_getSteering(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_getSteering(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IRobot_getSteeringPtr
newCallback_IRobot_getSteering(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_getSteering<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_getSteeringPtr
newCallback_IRobot_getSteering(T* instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_getSteering<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IRobot_setSteering : public Callback_IRobot_setSteering_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Short);

    CallbackNC_IRobot_setSteering(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::Ice::Short __ret;
        try
        {
            __ret = __proxy->end_setSteering(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IRobot_setSteeringPtr
newCallback_IRobot_setSteering(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Short), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setSteering<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_setSteeringPtr
newCallback_IRobot_setSteering(T* instance, void (T::*cb)(::Ice::Short), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setSteering<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IRobot_setSteering : public Callback_IRobot_setSteering_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Short, const CT&);

    Callback_IRobot_setSteering(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::Ice::Short __ret;
        try
        {
            __ret = __proxy->end_setSteering(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IRobot_setSteeringPtr
newCallback_IRobot_setSteering(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Short, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setSteering<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_setSteeringPtr
newCallback_IRobot_setSteering(T* instance, void (T::*cb)(::Ice::Short, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setSteering<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IRobot_getImageSensor : public Callback_IRobot_getImageSensor_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::ImageIceMod::ImageIce&);

    CallbackNC_IRobot_getImageSensor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::ImageIceMod::ImageIce __ret;
        try
        {
            __ret = __proxy->end_getImageSensor(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IRobot_getImageSensorPtr
newCallback_IRobot_getImageSensor(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ImageIceMod::ImageIce&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_getImageSensor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_getImageSensorPtr
newCallback_IRobot_getImageSensor(T* instance, void (T::*cb)(const ::ImageIceMod::ImageIce&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_getImageSensor<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IRobot_getImageSensor : public Callback_IRobot_getImageSensor_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::ImageIceMod::ImageIce&, const CT&);

    Callback_IRobot_getImageSensor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::ImageIceMod::ImageIce __ret;
        try
        {
            __ret = __proxy->end_getImageSensor(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IRobot_getImageSensorPtr
newCallback_IRobot_getImageSensor(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ImageIceMod::ImageIce&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_getImageSensor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_getImageSensorPtr
newCallback_IRobot_getImageSensor(T* instance, void (T::*cb)(const ::ImageIceMod::ImageIce&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_getImageSensor<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IRobot_getImageSensorDims : public Callback_IRobot_getImageSensorDims_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::ImageIceMod::DimsIce&);

    CallbackNC_IRobot_getImageSensorDims(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::ImageIceMod::DimsIce __ret;
        try
        {
            __ret = __proxy->end_getImageSensorDims(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IRobot_getImageSensorDimsPtr
newCallback_IRobot_getImageSensorDims(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ImageIceMod::DimsIce&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_getImageSensorDims<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_getImageSensorDimsPtr
newCallback_IRobot_getImageSensorDims(T* instance, void (T::*cb)(const ::ImageIceMod::DimsIce&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_getImageSensorDims<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IRobot_getImageSensorDims : public Callback_IRobot_getImageSensorDims_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::ImageIceMod::DimsIce&, const CT&);

    Callback_IRobot_getImageSensorDims(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::ImageIceMod::DimsIce __ret;
        try
        {
            __ret = __proxy->end_getImageSensorDims(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IRobot_getImageSensorDimsPtr
newCallback_IRobot_getImageSensorDims(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ImageIceMod::DimsIce&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_getImageSensorDims<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_getImageSensorDimsPtr
newCallback_IRobot_getImageSensorDims(T* instance, void (T::*cb)(const ::ImageIceMod::DimsIce&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_getImageSensorDims<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IRobot_getSensorValue : public Callback_IRobot_getSensorValue_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Float);

    CallbackNC_IRobot_getSensorValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_getSensorValue(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IRobot_getSensorValuePtr
newCallback_IRobot_getSensorValue(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_getSensorValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_getSensorValuePtr
newCallback_IRobot_getSensorValue(T* instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_getSensorValue<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IRobot_getSensorValue : public Callback_IRobot_getSensorValue_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Float, const CT&);

    Callback_IRobot_getSensorValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float __ret;
        try
        {
            __ret = __proxy->end_getSensorValue(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IRobot_getSensorValuePtr
newCallback_IRobot_getSensorValue(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_getSensorValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_getSensorValuePtr
newCallback_IRobot_getSensorValue(T* instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_getSensorValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IRobot_getSensors : public Callback_IRobot_getSensors_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, ::Ice::Float, ::Ice::Float, ::Ice::Float);

    CallbackNC_IRobot_getSensors(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float xPos;
        ::Ice::Float yPos;
        ::Ice::Float ori;
        bool __ret;
        try
        {
            __ret = __proxy->end_getSensors(xPos, yPos, ori, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, xPos, yPos, ori);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, xPos, yPos, ori);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IRobot_getSensorsPtr
newCallback_IRobot_getSensors(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, ::Ice::Float, ::Ice::Float, ::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_getSensors<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_getSensorsPtr
newCallback_IRobot_getSensors(T* instance, void (T::*cb)(bool, ::Ice::Float, ::Ice::Float, ::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_getSensors<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IRobot_getSensors : public Callback_IRobot_getSensors_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, ::Ice::Float, ::Ice::Float, ::Ice::Float, const CT&);

    Callback_IRobot_getSensors(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float xPos;
        ::Ice::Float yPos;
        ::Ice::Float ori;
        bool __ret;
        try
        {
            __ret = __proxy->end_getSensors(xPos, yPos, ori, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, xPos, yPos, ori, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, xPos, yPos, ori, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IRobot_getSensorsPtr
newCallback_IRobot_getSensors(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, ::Ice::Float, ::Ice::Float, ::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_getSensors<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_getSensorsPtr
newCallback_IRobot_getSensors(T* instance, void (T::*cb)(bool, ::Ice::Float, ::Ice::Float, ::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_getSensors<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IRobot_getDistanceAngle : public Callback_IRobot_getDistanceAngle_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, ::Ice::Float, ::Ice::Float);

    CallbackNC_IRobot_getDistanceAngle(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float dist;
        ::Ice::Float ang;
        bool __ret;
        try
        {
            __ret = __proxy->end_getDistanceAngle(dist, ang, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, dist, ang);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, dist, ang);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IRobot_getDistanceAnglePtr
newCallback_IRobot_getDistanceAngle(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, ::Ice::Float, ::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_getDistanceAngle<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_getDistanceAnglePtr
newCallback_IRobot_getDistanceAngle(T* instance, void (T::*cb)(bool, ::Ice::Float, ::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_getDistanceAngle<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IRobot_getDistanceAngle : public Callback_IRobot_getDistanceAngle_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, ::Ice::Float, ::Ice::Float, const CT&);

    Callback_IRobot_getDistanceAngle(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::Ice::Float dist;
        ::Ice::Float ang;
        bool __ret;
        try
        {
            __ret = __proxy->end_getDistanceAngle(dist, ang, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, dist, ang, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, dist, ang, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IRobot_getDistanceAnglePtr
newCallback_IRobot_getDistanceAngle(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, ::Ice::Float, ::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_getDistanceAngle<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_getDistanceAnglePtr
newCallback_IRobot_getDistanceAngle(T* instance, void (T::*cb)(bool, ::Ice::Float, ::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_getDistanceAngle<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IRobot_motorsOff : public Callback_IRobot_motorsOff_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IRobot_motorsOff(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IRobot_motorsOffPtr
newCallback_IRobot_motorsOff(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_motorsOff<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_motorsOffPtr
newCallback_IRobot_motorsOff(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_motorsOff<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IRobot_motorsOffPtr
newCallback_IRobot_motorsOff(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_motorsOff<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_motorsOffPtr
newCallback_IRobot_motorsOff(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_motorsOff<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IRobot_motorsOff : public Callback_IRobot_motorsOff_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IRobot_motorsOff(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IRobot_motorsOffPtr
newCallback_IRobot_motorsOff(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_motorsOff<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_motorsOffPtr
newCallback_IRobot_motorsOff(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_motorsOff<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_motorsOffPtr
newCallback_IRobot_motorsOff(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_motorsOff<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_motorsOffPtr
newCallback_IRobot_motorsOff(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_motorsOff<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IRobot_setMotor : public Callback_IRobot_setMotor_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IRobot_setMotor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IRobot_setMotorPtr
newCallback_IRobot_setMotor(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setMotor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_setMotorPtr
newCallback_IRobot_setMotor(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setMotor<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IRobot_setMotorPtr
newCallback_IRobot_setMotor(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setMotor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_setMotorPtr
newCallback_IRobot_setMotor(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setMotor<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IRobot_setMotor : public Callback_IRobot_setMotor_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IRobot_setMotor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IRobot_setMotorPtr
newCallback_IRobot_setMotor(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setMotor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_setMotorPtr
newCallback_IRobot_setMotor(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setMotor<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_setMotorPtr
newCallback_IRobot_setMotor(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setMotor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_setMotorPtr
newCallback_IRobot_setMotor(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setMotor<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IRobot_sendRawCmd : public Callback_IRobot_sendRawCmd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Short);

    CallbackNC_IRobot_sendRawCmd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::Ice::Short __ret;
        try
        {
            __ret = __proxy->end_sendRawCmd(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IRobot_sendRawCmdPtr
newCallback_IRobot_sendRawCmd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Short), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_sendRawCmd<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_sendRawCmdPtr
newCallback_IRobot_sendRawCmd(T* instance, void (T::*cb)(::Ice::Short), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_sendRawCmd<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IRobot_sendRawCmd : public Callback_IRobot_sendRawCmd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Short, const CT&);

    Callback_IRobot_sendRawCmd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Robots::IRobotPrx __proxy = ::Robots::IRobotPrx::uncheckedCast(__result->getProxy());
        ::Ice::Short __ret;
        try
        {
            __ret = __proxy->end_sendRawCmd(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IRobot_sendRawCmdPtr
newCallback_IRobot_sendRawCmd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Short, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_sendRawCmd<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_sendRawCmdPtr
newCallback_IRobot_sendRawCmd(T* instance, void (T::*cb)(::Ice::Short, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_sendRawCmd<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IRobot_playSong : public Callback_IRobot_playSong_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IRobot_playSong(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IRobot_playSongPtr
newCallback_IRobot_playSong(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_playSong<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_playSongPtr
newCallback_IRobot_playSong(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_playSong<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IRobot_playSongPtr
newCallback_IRobot_playSong(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_playSong<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_playSongPtr
newCallback_IRobot_playSong(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_playSong<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IRobot_playSong : public Callback_IRobot_playSong_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IRobot_playSong(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IRobot_playSongPtr
newCallback_IRobot_playSong(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_playSong<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_playSongPtr
newCallback_IRobot_playSong(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_playSong<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_playSongPtr
newCallback_IRobot_playSong(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_playSong<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_playSongPtr
newCallback_IRobot_playSong(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_playSong<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IRobot_sendStart : public Callback_IRobot_sendStart_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IRobot_sendStart(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IRobot_sendStartPtr
newCallback_IRobot_sendStart(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_sendStart<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_sendStartPtr
newCallback_IRobot_sendStart(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_sendStart<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IRobot_sendStartPtr
newCallback_IRobot_sendStart(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_sendStart<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_sendStartPtr
newCallback_IRobot_sendStart(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_sendStart<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IRobot_sendStart : public Callback_IRobot_sendStart_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IRobot_sendStart(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IRobot_sendStartPtr
newCallback_IRobot_sendStart(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_sendStart<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_sendStartPtr
newCallback_IRobot_sendStart(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_sendStart<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_sendStartPtr
newCallback_IRobot_sendStart(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_sendStart<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_sendStartPtr
newCallback_IRobot_sendStart(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_sendStart<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IRobot_setMode : public Callback_IRobot_setMode_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IRobot_setMode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IRobot_setModePtr
newCallback_IRobot_setMode(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setMode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_setModePtr
newCallback_IRobot_setMode(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setMode<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IRobot_setModePtr
newCallback_IRobot_setMode(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setMode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_setModePtr
newCallback_IRobot_setMode(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setMode<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IRobot_setMode : public Callback_IRobot_setMode_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IRobot_setMode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IRobot_setModePtr
newCallback_IRobot_setMode(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setMode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_setModePtr
newCallback_IRobot_setMode(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setMode<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_setModePtr
newCallback_IRobot_setMode(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setMode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_setModePtr
newCallback_IRobot_setMode(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setMode<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IRobot_setDemo : public Callback_IRobot_setDemo_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IRobot_setDemo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IRobot_setDemoPtr
newCallback_IRobot_setDemo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setDemo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_setDemoPtr
newCallback_IRobot_setDemo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setDemo<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IRobot_setDemoPtr
newCallback_IRobot_setDemo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setDemo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_setDemoPtr
newCallback_IRobot_setDemo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setDemo<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IRobot_setDemo : public Callback_IRobot_setDemo_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IRobot_setDemo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IRobot_setDemoPtr
newCallback_IRobot_setDemo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setDemo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_setDemoPtr
newCallback_IRobot_setDemo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setDemo<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_setDemoPtr
newCallback_IRobot_setDemo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setDemo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_setDemoPtr
newCallback_IRobot_setDemo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setDemo<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IRobot_setLED : public Callback_IRobot_setLED_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IRobot_setLED(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IRobot_setLEDPtr
newCallback_IRobot_setLED(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setLED<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_setLEDPtr
newCallback_IRobot_setLED(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setLED<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IRobot_setLEDPtr
newCallback_IRobot_setLED(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setLED<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_setLEDPtr
newCallback_IRobot_setLED(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_setLED<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IRobot_setLED : public Callback_IRobot_setLED_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IRobot_setLED(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IRobot_setLEDPtr
newCallback_IRobot_setLED(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setLED<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_setLEDPtr
newCallback_IRobot_setLED(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setLED<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_setLEDPtr
newCallback_IRobot_setLED(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setLED<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_setLEDPtr
newCallback_IRobot_setLED(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_setLED<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IRobot_shutdown : public Callback_IRobot_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IRobot_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IRobot_shutdownPtr
newCallback_IRobot_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_shutdownPtr
newCallback_IRobot_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IRobot_shutdownPtr
newCallback_IRobot_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IRobot_shutdownPtr
newCallback_IRobot_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRobot_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IRobot_shutdown : public Callback_IRobot_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IRobot_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IRobot_shutdownPtr
newCallback_IRobot_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_shutdownPtr
newCallback_IRobot_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_shutdownPtr
newCallback_IRobot_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IRobot_shutdownPtr
newCallback_IRobot_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRobot_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
