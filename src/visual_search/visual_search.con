################################################ Set Global Variables #################################################

set NEURON_MEMORY_SIZE = 1728*1;
set TYPE_SHOW = SHOW_FRAME;
set TYPE_MOVING_FRAME = STOP;
set CALL_UPDATE_FUNCTIONS = FALSE;	#update functions should not be invoked

######################################################## Constants ####################################################

# General settings
const FOV_HORIZONTAL = 48.0;
const TARGET_NEURON_LAYER_NAME = "nl_target_coordinates";

# Architecture settings ( PANDA )
const IMAGE_WIDTH  = 312;
const IMAGE_HEIGHT = 233;

# Architecture settings ( largest image )
#const IMAGE_WIDTH  = 1024;
#const IMAGE_HEIGHT = 768;

# Architecture settings ( large image )
#const IMAGE_WIDTH  = 640;
#const IMAGE_HEIGHT = 480;

# Architecture settings ( arbitrary size ) 
#const IMAGE_WIDTH  = 320;
#const IMAGE_HEIGHT = 240;

# Architecture settings ( arbitrary size ) 
#const IMAGE_WIDTH  = 313;
#const IMAGE_HEIGHT = 253;

# Architecture settings ( arbitrary size ) 
#const IMAGE_WIDTH  = 352;
#const IMAGE_HEIGHT = 288;

# Architecture settings ( arbitrary size ) 
#const IMAGE_WIDTH  = 290;
#const IMAGE_HEIGHT = 217;

#Default NL size (Used in the MAE framework)
#const NL_WIDTH  = 64;
#const NL_HEIGHT = 48;

const SIZE = 6;

#const NL_WIDTH  = 16*4;
const NL_WIDTH  = 8*SIZE;
#const NL_HEIGHT = 12*4;
const NL_HEIGHT = 6*SIZE;

# Neuron layer parameters
const INPUTS_PER_NEURON = 512;
#const GAUSSIAN_RADIUS = 10.0;	
const GAUSSIAN_RADIUS = 5.0;
const LOG_FACTOR = 10.0;
#const SCALE_FACTOR = 4.5;
#const SCALE_FACTOR = 2.5;
const SCALE_FACTOR = 1.0;
float dynamic_scale_factor = 1.0;

# For mean point
const BAND_WIDTH = 0.125;

# Network status conventions
const TRAINNING	= 0;
const	RUNNING	= 1;

# Search heuristic parameters for Mean value activation
const	CUT_POINT	= 0.7;

# Translation filter deltaX & delataY
float	translation_filter_deltaX = 0.0;
float	translation_filter_deltaY = 0.0;

#Neuron layer activation bandwidth
#const   ACT_BAND_WIDTH = 2*4;
#const   ACT_BAND_WIDTH = 13;
const   ACT_BAND_WIDTH = SIZE;

#Activation Bandwidth output value ( highest output )
float   HIGHEST_OUTPUT = 1.0;

#Percentage of neurons in sparse neuron layer trainning and 
#float	PERCENTAGE_OF_TRAINING_NEURONS = 50.0;
const	MAX_NUMBER_OF_SACCADE = 7;

#Thresholded moving average saccade measurament
const	MOVING_AVERAGE_WEIGHT = 0.2;
const	MOVING_AVERAGE_THRESHOLD = 0.01;
const	MOVING_AVERAGE_INTIAL_VALUE = 10;

#const	INPUT_PATH	= "/home/hallysson/img/ARDataBase/ARPhotoDataBase/";

#Select camera for use
const	LEFT_CAMERA 		= 0;
const	RIGHT_CAMERA		= 1;

#Select wich camera will be used in the Carmen module usage and its lens
#const	CAMERA		= 1;
const	CAMERA		= 2;		#1 or 2
const	LENS		= LEFT_CAMERA;	#Left camera usage

#Pixel tolerance for reverse saccade
const 	INVERSE_SACCADE_PIXEL_DELTA	= 10;

#Saccade certainty threshold ( percentage / 100 )
const	SACCADE_CERTAINTY_THRESHOLD	= 0.8;

#Maximum number of visual search saccadic movements inhibition cycles (for inhibited regions)
const	VISUAL_SEARCH_INHIBITION_CYCLES	= 40;

#File names for testing
#const	TEST_FILE_NAME			= "TLD_dataset_david_01_test.csv";
const	TEST_FILE_NAME			= "TLD_dataset_10_panda_mariella.csv";


#File names for Ground Truth comparison
const	TLD_01_DAVID				= "TLD_01_david_gt.csv";
const 	TLD_02_JUMPING				= "TLD_02_jumping_gt.csv";
const	TLD_03_PEDESTRIAN1			= "TLD_03_pedestrian1_gt.csv";
const	TLD_04_PEDESTRIAN2			= "TLD_04_pedestrian2_gt.csv";
const	TLD_05_PEDESTRIAN3			= "TLD_05_pedestrian3_gt.csv";
const	TLD_06_CAR					= "TLD_06_car_gt.csv";
const	TLD_07_MOTOCROSS 			= "TLD_07_motocross.csv";
const	TLD_08_VOLKSWAGEN			= "TLD_08_volkswagen_gt.csv";
const	TLD_09_CARCHASE				= "TLD_09_carchase_gt.csv";
const	TLD_10_PANDA				= "TLD_10_panda_gt.csv";

const	CAMSHIFT_TEST_FILE_NAME 		= TLD_10_PANDA;

############################################### Neuron Layers #########################################################

#neuronlayer    	nl_v1_activation_map[NL_WIDTH][NL_HEIGHT]	of minchinton_fat_fast neurons color_selective sensitive with greyscale_float outputs using shared memory;

neuronlayer    	nl_v1_activation_map[NL_WIDTH][NL_HEIGHT]	of minchinton neurons color_selective sensitive with greyscale_float outputs using shared memory;

neuronlayer    	nl_v1_activation_map_f[NL_WIDTH][NL_HEIGHT] 	with greyscale_float outputs;

#neuronlayer	nl_v1_activation_map_f_thresholded[NL_WIDTH][NL_HEIGHT]	with greyscale_float outputs;

neuronlayer    	nl_target_coordinates[2][1]			with greyscale_float outputs;

neuronlayer    	nl_v1_pattern[NL_WIDTH][NL_HEIGHT]	       	with greyscale outputs;

neuronlayer	in_pattern_translated[IMAGE_WIDTH][IMAGE_HEIGHT]	with color outputs;

neuronlayer	in_pattern_translated_scaled[IMAGE_WIDTH][IMAGE_HEIGHT]	with color outputs;

neuronlayer	in_pattern_translated_scaled_filtered[IMAGE_WIDTH][IMAGE_HEIGHT]	with color outputs;

neuronlayer	in_pattern_translated_scaled_filtered_inhibited[IMAGE_WIDTH][IMAGE_HEIGHT]	with color outputs, show;

#neuronlayer	in_pattern_translated_scaled_filtered_overlayed[IMAGE_WIDTH][IMAGE_HEIGHT]	with color outputs;

neuronlayer	in_pattern_filtered_translated_log_polar[IMAGE_WIDTH][IMAGE_HEIGHT]	with color outputs;

neuronlayer	hamming_distance_layer[NL_WIDTH][NL_HEIGHT] with greyscale outputs, show;

############################################### Outputs #########################################################

#parameters: 	output_handler_min_value_position ("%s %f", <nl_target_coordinates_name>, <log_factor>)
#output         out_v1_activation_map_f[NL_WIDTH][NL_HEIGHT]  handled by output_handler_min_value_position ("%s %f", TARGET_NEURON_LAYER_NAME, LOG_FACTOR);

#Recommended output handler function
#parameters: 	output_handler_max_value_position ("%s %f", <nl_target_coordinates_name>, <log_factor>)
output		out_v1_activation_map_f[NL_WIDTH][NL_HEIGHT] handled by output_handler_max_value_position ("%s %f", TARGET_NEURON_LAYER_NAME, LOG_FACTOR);

#parameters: 	output_handler_mean_position ("%s %f %f", <nl_target_name_coordinates>, <log_factor>, <cut_point>)
#output		out_v1_activation_map_f [NL_WIDTH][NL_HEIGHT]  handled by output_handler_mean_position ("%s %f %f %f", TARGET_NEURON_LAYER_NAME, LOG_FACTOR, CUT_POINT, BAND_WIDTH);

#output         	out_target_coordinates[2][1];

#Log-polar mapped image->v1
#output          out_v1_pattern[IMAGE_WIDTH][IMAGE_HEIGHT];

#Non-filtered v1 activation map
output		out_v1_activation_map[NL_WIDTH][NL_HEIGHT];

#output		out_v1_activation_map_hamming_inhibited[NL_WIDTH][NL_HEIGHT];

################################################## Inputs #############################################################

input 		in_pattern[IMAGE_WIDTH][IMAGE_HEIGHT]	with color outputs produced by input_generator() controled by input_controler();

############################################### Filters ###############################################################   

#parameters:	translate_nl_filter ("%f %f",<Delta_X>, <Delta_Y>)
filter		in_pattern	with translate_nl_filter ("%p %p",&translation_filter_deltaX,&translation_filter_deltaY) producing in_pattern_translated;

#parameters: 	scale_nl_filter ("%f", <scale factor>) 
filter		in_pattern_translated	with nl_reshape_filter("%p %d %d", &dynamic_scale_factor, -IMAGE_WIDTH/2, -IMAGE_HEIGHT/2) producing in_pattern_translated_scaled;

#parameters: 	gaussian_filter ("%s %d", <kernel size>, <sigma>)
filter		in_pattern_translated_scaled	with gaussian_filter ("%d %f", 5, 1.0) producing in_pattern_translated_scaled_filtered;

#parameters: 	draw_inhibited_regions_in_nl_filter ("%f %d %d %p %p", <scale_factor> <inhib_x_region_size> <inhib_y_region_size> <Delta_X> <Delta_Y> )
filter		in_pattern_translated_scaled_filtered	with draw_inhibited_regions_in_nl_filter ("%f %d %d %p", SCALE_FACTOR, 40, 40, &in_pattern) producing in_pattern_translated_scaled_filtered_inhibited;

#parameters: 	map_image_v1 ("%s %d", <input_name>, <log_factor>)
filter		in_pattern  with scaled_map_image_v1 ("%s %f %f", "in_pattern", LOG_FACTOR, SCALE_FACTOR) producing in_pattern_filtered_translated_log_polar;

#parameters: 	gaussian_filter ("%s %d", <kernel size>, <sigma>)
filter		nl_v1_activation_map 	with gaussian_filter ("%d %f", 9, 1.0) producing nl_v1_activation_map_f;

### Extra Filters - by Jorcy Neto ###

#filter		in_pattern_translated_scaled_filtered_inhibited, nl_v1_activation_map_f	with activation_pattern_overlay_filter ("%f", LOG_FACTOR) producing in_pattern_translated_scaled_filtered_overlayed;

filter		nl_v1_activation_map	with hamming_distance_filter("") producing hamming_distance_layer;

################################## Connect Neuron Layers to Outputs #############################################

outputconnect	nl_v1_activation_map		to out_v1_activation_map;

outputconnect	nl_v1_activation_map_f		to out_v1_activation_map_f;

#outputconnect  	nl_target_coordinates		to out_target_coordinates;

#outputconnect	in_pattern_filtered_translated_log_polar	to out_v1_pattern;

#outputconnect	nl_v1_activation_map_hamming_inhibited		to out_v1_activation_map_hamming_inhibited;	

############################################### Associations ####################################################

associate	nl_v1_activation_map		with	nl_v1_activation_map;

################################################ Connections ####################################################

connect in_pattern_translated_scaled_filtered_inhibited to nl_v1_activation_map with INPUTS_PER_NEURON random inputs per neuron and log_polar distribution with radius GAUSSIAN_RADIUS and logfactor LOG_FACTOR , same interconnection pattern;

################################################# User Functions ################################################
	
int calculate_random_position ("%d %d %d %d"); 
int SetNetworkStatus ("%d");
int update_input_filters("");

int visual_search_converged("");
int visual_search_get_last_count_number("");
int visual_search_get_saccade_moving_average("");
int visual_search_print_saccade_moving_average("");
int execute_IPC_listen("%d");
int MAE_sleep("%d");
int get_new_VS_state_change_message_value("");
int get_new_VS_training_message_value("");
int get_new_VS_test_message_value("");
int get_visual_search_state("");
int get_visual_search_state_message("");
int set_visual_search_state("%d");
int reset_new_VS_state_change_message_value("");
int reset_new_VS_training_message_value("");
int reset_new_VS_test_message_value("");
int MAE_copy_current_test_message_into_input("");
int MAE_perform_state_change("");
int MAE_perform_network_training("");
int MAE_perform_network_training_inverted_height("");
int MAE_perform_network_retraining("");
int MAE_perform_network_masked_retraining("");
int MAE_perform_network_conditional_masked_retraining("");
int MAE_perform_sparse_network_training("%f");
int MAE_perform_sparse_network_retraining("%f");
int MAE_perform_network_test("");
int MAE_print_network_certainty_simple("");
int MAE_print_network_certainty_percentage_of_active_neurons_versus_trained_bar("");
int MAE_print_network_certainty_percentage_of_active_neurons_versus_trained_bar_float("");
float MAE_calculate_network_certainty_percentage_of_active_neurons_versus_trained_bar_float("");
float MAE_obtain_saccade_resulting_scale_factor("");	#Scale factor (activation_weight) obtaining_function
float MAE_calculate_network_certainty_correlate("");
int MAE_print_network_certainty_correlate("");
int MAE_print_network_angular_similarity("");
int MAE_perform_network_flush_and_retraining("");
int MAE_is_saccade_certainty_above_threshold("%f");
int MAE_is_saccade_certainty_below_threshold("%f");
int MAE_reset_input_layer_xy_to_central_position("");
int MAE_set_input_layer_xy_to_desired_position("%d %d");
int MAE_set_input_layer_xy_to_random_position("");
int MAE_printf("%s");
int MAE_printfInt("%d");
int MAE_publish_OK("");
int MAE_publish_FAIL("");
int MAE_update_input_layer_neurons_and_image("");
int MAE_forced_sleep("%d");

int MAE_print_frame_number_and_x_y_input_position("%d");
int MAE_create_log_file("");
int MAE_print_frame_number_and_x_y_input_position_to_output_file("%d");
int MAE_print_x_y_input_position_to_output_file_based_on_network_certainty("%f %f");
int MAE_print_network_settings_to_log_file("");
int MAE_print_hit_rate_to_log_file("%d %d %d");
int MAE_print_hit_rate_to_terminal("%d %d %d");
int MAE_start_timer("");
int MAE_stop_timer("");
int MAE_print_saccade_and_time_statistics_to_output_file("");
int MAE_print_saccade_time_and_frame_statistics_to_output_file("%d");
int MAE_print_saccade_time_and_frame_statistics_to_terminal("%d");
int MAE_terminate_log_file("");
int MAE_open_comparison_log_file("");
int MAE_open_TLD_comparison_log_file("");
int MAE_read_comparison_log_file_and_check_for_hit("");
int MAE_is_inhibition_point_list_empty("");
int MAE_read_comparison_log_file_and_check_for_hit_in_TLD_dataset("");
int MAE_calculate_global_hit_rate_from_comparison_log_file("%d %d");
int MAE_terminate_comparison_log_file("");
float MAE_different_pixel_certainty("");
int MAE_print_retrain_counter("%d");

int MAE_output_divergence_measures("");
int MAE_hamming_distance_based_retrain("%f");
float MAE_hamming_distance_output_certainty("");
