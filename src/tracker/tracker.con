################################################ Set Global Variables #################################################


set TYPE_SHOW = SHOW_FRAME;
set TYPE_MOVING_FRAME = STOP;
set CALL_UPDATE_FUNCTIONS = FALSE;	#update functions should not be invoked

######################################################## Constants ####################################################

# General settings
const TARGET_NEURON_LAYER_NAME = "nl_target_coordinates";

# Architecture settings ( arbitrary size ) 
#camera
#const IMAGE_WIDTH  = 640;
#const IMAGE_HEIGHT = 480;
const IMAGE_WIDTH  = 1280;
const IMAGE_HEIGHT = 960;
#const IMAGE_WIDTH  = 320;
#const IMAGE_HEIGHT = 240;
#lena
#const IMAGE_WIDTH  = 512;
#const IMAGE_HEIGHT = 512;
#panda
#const IMAGE_WIDTH  = 312;
#const IMAGE_HEIGHT = 233;


#Neuron layer activation bandwidth
#const BAND_WIDTH = 15;
const BAND_WIDTH = 0.125;
#const NL_WIDTH  = 8*6;
#const NL_HEIGHT = 6*6;
const NL_WIDTH  = 16 * 4 + 1;		# TEM QUE SER IMPAR
const NL_HEIGHT = 12 * 4;		# TEM QUE SER PAR

set NEURON_MEMORY_SIZE = 32 * NL_WIDTH * NL_HEIGHT; #neuron layers size

# Neuron layer parameters
const INPUTS_PER_NEURON = 256;
const GAUSSIAN_RADIUS = 8.0;
const LOG_FACTOR = 2.0;

#Saccadic movement stop condition
const MAX_NUMBER_OF_SACCADE = 4;
const MIN_THRESHOLD_OF_SACCADE = 0.5;

# Translation filter deltaX & delataY
float translation_filter_deltaX = 0.0;
float translation_filter_deltaY = 0.0;

float translation_filter_deltaX_2 = IMAGE_WIDTH / 2.0;
float translation_filter_deltaY_2 = IMAGE_HEIGHT / 2.0;

float dynamic_scale_factor = 1.0;
float dynamic_scale_factor_init = -1.0;
float g_halph_band_width = 1.0;

#Activation Bandwidth output value ( highest output )
float HIGHEST_OUTPUT = 1.0;

# tamanho da camada de zoom
const TAM_NL_ZOOM = 1601;

const IMAGE_WIDTH_RESIZED  = 201;	# TEM QUE SER IMPAR
const IMAGE_HEIGHT_RESIZED = 201;	# TEM QUE SER IMPAR

float height_in_train = -1.0;
float width_in_train = -1.0;

# gaussian_filter_dynamic parameter
int	g_kernel_size = 5;
float	g_sigma = 1.0;


############################################### Neuron Layers #########################################################

neuronlayer nl_v1_activation_map[NL_WIDTH][NL_HEIGHT] of minchinton neurons greyscale sensitive with color outputs using shared memory;

neuronlayer nl_target_coordinates[2][1]	with greyscale_float outputs;

neuronlayer nl_v1_pattern[NL_WIDTH][NL_HEIGHT] with color outputs;

neuronlayer in_saccade_translated[IMAGE_WIDTH*2][IMAGE_HEIGHT*2] with color outputs;
neuronlayer in_saccade_translated_gaussian[IMAGE_WIDTH*2][IMAGE_HEIGHT*2] with color outputs;

neuronlayer in_pattern_translated[IMAGE_WIDTH_RESIZED][IMAGE_HEIGHT_RESIZED] with color outputs;
neuronlayer in_pattern_filtered_translated[IMAGE_WIDTH_RESIZED][IMAGE_HEIGHT_RESIZED] with color outputs;
neuronlayer in_pattern_filtered_translated_red[IMAGE_WIDTH_RESIZED][IMAGE_HEIGHT_RESIZED] with greyscale outputs;
neuronlayer in_pattern_filtered_translated_green[IMAGE_WIDTH_RESIZED][IMAGE_HEIGHT_RESIZED] with greyscale outputs;
neuronlayer in_pattern_filtered_translated_blue[IMAGE_WIDTH_RESIZED][IMAGE_HEIGHT_RESIZED] with greyscale outputs;

neuronlayer table[IMAGE_WIDTH_RESIZED][IMAGE_HEIGHT_RESIZED] with color outputs;
neuronlayer table_v1[NL_WIDTH][NL_HEIGHT] with color outputs;

neuronlayer nl_v1_activation_map_neuron_weight[NL_WIDTH][NL_HEIGHT] with greyscale_float outputs;

neuronlayer nl_activation_map_hough[IMAGE_WIDTH_RESIZED][IMAGE_HEIGHT_RESIZED]	with greyscale_float outputs;
neuronlayer nl_activation_map_hough_gaussian[IMAGE_WIDTH_RESIZED][IMAGE_HEIGHT_RESIZED]	with greyscale_float outputs;
neuronlayer nl_activation_map_hough_v1[NL_WIDTH][NL_HEIGHT]		with greyscale_float outputs;

neuronlayer nl_activation_map_hough_zoom[TAM_NL_ZOOM][1]	with greyscale_float outputs;
neuronlayer nl_activation_map_hough_zoom_gaussian[TAM_NL_ZOOM][1]	with greyscale_float outputs;


############################################### Outputs #########################################################

#output out_saccade_v1_activation_map[NL_WIDTH][NL_HEIGHT] handled by output_handler_max_value_position ("%s %f", TARGET_NEURON_LAYER_NAME, LOG_FACTOR);

output out_nl_v1_activation_map_neuron_weight[IMAGE_WIDTH_RESIZED][IMAGE_HEIGHT_RESIZED] handled by output_handler_weighted_average_value_position("%s %f", TARGET_NEURON_LAYER_NAME, LOG_FACTOR);

output out_table[IMAGE_WIDTH_RESIZED][IMAGE_HEIGHT_RESIZED];

output out_in_pattern_filtered_translated[IMAGE_WIDTH_RESIZED][IMAGE_HEIGHT_RESIZED];

output out_nl_activation_map_hough_zoom[TAM_NL_ZOOM][1] handled by output_handler_resize("%f", LOG_FACTOR);

output out_nl_activation_map_hough_zoom_gaussian[TAM_NL_ZOOM][1] handled by output_handler_resize("%f", LOG_FACTOR);

################################################## Inputs #############################################################

input in_saccade_current[IMAGE_WIDTH][IMAGE_HEIGHT] with color outputs produced by input_generator() controled by input_controler();

input in_saccade_trained[IMAGE_WIDTH][IMAGE_HEIGHT] with color outputs produced by input_generator2() controled by input_controler2();

############################################### Filters ###############################################################   


filter in_saccade_current with translate_nl_filter ("%p %p",&translation_filter_deltaX,&translation_filter_deltaY) producing in_saccade_translated;

filter in_saccade_translated with translate_nl_filter_3("%p %p", &translation_filter_deltaX_2, &translation_filter_deltaY_2) producing in_pattern_translated;

filter in_pattern_translated with gaussian_filter("%d %f", 5, 1.0) producing in_pattern_filtered_translated;
filter in_pattern_filtered_translated with red_mask_filter("") producing in_pattern_filtered_translated_red;
filter in_pattern_filtered_translated with green_mask_filter("") producing in_pattern_filtered_translated_green;
filter in_pattern_filtered_translated with blue_mask_filter("") producing in_pattern_filtered_translated_blue;

#filter in_saccade_current with map_image_v1("%s %f", "", LOG_FACTOR) producing nl_v1_pattern;
filter in_pattern_filtered_translated with map_image_v1("%s %f", "", LOG_FACTOR) producing nl_v1_pattern;

filter nl_v1_activation_map with compute_weigheted_neighboor_filter("%f", LOG_FACTOR) producing nl_v1_activation_map_neuron_weight;

filter table with map_image_v1("%s %f", "", LOG_FACTOR) producing table_v1;

filter nl_v1_activation_map with generate_hough_activation_map("%f", LOG_FACTOR) producing nl_activation_map_hough;
filter nl_activation_map_hough with gaussian_filter("%d %f", 5, 0.5) producing nl_activation_map_hough_gaussian;
filter nl_activation_map_hough_gaussian	with map_image_v1("%s %f", "", LOG_FACTOR) producing nl_activation_map_hough_v1;

filter nl_v1_activation_map with generate_hough_zoom_activation_map("%f", LOG_FACTOR) producing nl_activation_map_hough_zoom;

filter nl_activation_map_hough_zoom with gaussian_filter("%d %f", 13, 2.0) producing nl_activation_map_hough_zoom_gaussian;


################################## Connect Neuron Layers to Outputs #############################################

#outputconnect nl_v1_activation_map to out_saccade_v1_activation_map;

#outputconnect nl_v1_activation_map to out_nl_v1_activation_map_neuron_weight;
outputconnect nl_activation_map_hough to out_nl_v1_activation_map_neuron_weight;

outputconnect table to out_table;

outputconnect in_pattern_filtered_translated to out_in_pattern_filtered_translated;

outputconnect nl_activation_map_hough_zoom to out_nl_activation_map_hough_zoom;

outputconnect nl_activation_map_hough_zoom_gaussian to out_nl_activation_map_hough_zoom_gaussian;


############################################### Associations ####################################################

associate nl_v1_activation_map with nl_v1_activation_map;

################################################ Connections ####################################################

#connect in_saccade_translated to nl_v1_activation_map with INPUTS_PER_NEURON random inputs per neuron and 
#log_polar distribution with radius GAUSSIAN_RADIUS and logfactor LOG_FACTOR , same interconnection pattern;

connect in_pattern_filtered_translated_red to nl_v1_activation_map with INPUTS_PER_NEURON random inputs per neuron and log_polar distribution with radius GAUSSIAN_RADIUS and logfactor LOG_FACTOR , same interconnection pattern;
connect in_pattern_filtered_translated_green to nl_v1_activation_map with INPUTS_PER_NEURON random inputs per neuron and log_polar distribution with radius GAUSSIAN_RADIUS and logfactor LOG_FACTOR , same interconnection pattern;
connect in_pattern_filtered_translated_blue to nl_v1_activation_map with INPUTS_PER_NEURON random inputs per neuron and log_polar distribution with radius GAUSSIAN_RADIUS and logfactor LOG_FACTOR , same interconnection pattern;

#connect in_saccade_translated_scaled_gaussian to nl_detection with INPUTS_PER_NEURON random inputs per neuron and 
#log_polar distribution with radius GAUSSIAN_RADIUS and logfactor LOG_FACTOR , same interconnection pattern;


################################################# User Functions ################################################
int run_train("%d");
int run_test("%d");


