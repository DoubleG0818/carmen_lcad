name: "Dqn"

#batch of 32 input samples. each input sample contains 4 frames.
layers {
  name: "frames_input_layer"
  type: MEMORY_DATA
  top: "frames"
  top: "dummy1"
  memory_data_param {
    batch_size: 1
    channels: 3
    height: 200
    width: 200
  }
}
#target_input: expected rewards for each action. This value is compared to the q-value predicted by the network and the difference (euclidean loss) is used to update the weights.
layers {
  name: "target_input_layer"
  type: MEMORY_DATA
  top: "target"
  top: "dummy2"
  memory_data_param {
    batch_size: 1
    channels: 5
    height: 1
    width: 1
  }
}
#auxiliar layer used during training. the values of this layer are multiplied by the q-values calculated by the network. The q-values of all actions, except the one performed
#by the agent are multiplied by 0. The action performed by the agent is multiplied by 1.
layers {
  name: "filter_input_layer"
  type: MEMORY_DATA
  top: "filter"
  top: "dummy3"
  memory_data_param {
    batch_size: 1
    channels: 5
    height: 1
    width: 1
  }
}
layers {
  name: "additional_data_input_layer"
  type: MEMORY_DATA
  top: "additional_data"
  top: "dummy4"
  memory_data_param {
    batch_size: 1
    channels: 300 
    height: 1
    width: 1
  }
}
layers {
  name: "silence_layer"
  type: SILENCE
  bottom: "dummy1"
  bottom: "dummy2"
  bottom: "dummy3"
  bottom: "dummy4"
}
layers {
  name: "conv1_layer"
  type: CONVOLUTION
  bottom: "frames"
  top: "conv1"
  convolution_param {
    num_output: 8
    kernel_size: 4
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layers {
  name: "conv1_relu_layer"
  type: TANH
  bottom: "conv1"
  top: "conv1"
}
layers {
  name: "pool1"
  type: POOLING
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layers {
  name: "conv2_layer"
  type: CONVOLUTION
  bottom: "pool1"
  top: "conv2"
  convolution_param {
    num_output: 8
    kernel_size: 4
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layers {
  name: "conv2_tanh_layer"
  type: TANH
  bottom: "conv2"
  top: "conv2"
}
layers {
  name: "pool2"
  type: POOLING
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layers {
  name: "conv3_layer"
  type: CONVOLUTION
  bottom: "pool2"
  top: "conv3"
  convolution_param {
    num_output: 8
    kernel_size: 4
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layers {
  name: "conv3_tanh_layer"
  type: TANH
  bottom: "conv3"
  top: "conv3"
}
layers {
    name: "flaten_conv3"
    type: FLATTEN
    bottom: "conv3"
    top: "flaten_conv3"
}
layers {
    name: "flaten_additional_data"
    type: FLATTEN
    bottom: "additional_data"
    top: "flaten_add_data"
}
layers {
  name: "concat_add_data_and_conv3"
  type: CONCAT
  bottom: "flaten_conv3"
  bottom: "flaten_add_data"
  top: "add_data_and_conv3"
  #concat_param {
    #axis: 1
  #}
}
layers {
  name: "ip1_layer"
  type: INNER_PRODUCT
  bottom: "add_data_and_conv3"
  top: "ip1"
  inner_product_param {
    num_output: 16
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layers {
  name: "ip1_tanh_layer"
  type: TANH
  bottom: "ip1"
  top: "ip1"
}
layers {
  name: "ip1.5_layer"
  type: INNER_PRODUCT
  bottom: "ip1"
  top: "ip1.5"
  inner_product_param {
    num_output: 16
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layers {
  name: "ip1.5_tanh_layer"
  type: TANH
  bottom: "ip1.5"
  top: "ip1.5"
}

layers {
  name: "ip2_layer"
  type: INNER_PRODUCT
  bottom: "ip1.5"
  top: "q_values"
  inner_product_param {
    num_output: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layers {
    name: "flaten_filter"
    type: FLATTEN
    bottom: "filter"
    top: "flaten_filter"
}
layers {
  name: "eltwise_layer"
  type: ELTWISE
  bottom: "q_values"
  bottom: "flaten_filter"
  top: "filtered_q_values"
  eltwise_param {
    operation: PROD
  }
}
layers {
  name: "loss"
  type: EUCLIDEAN_LOSS
  bottom: "filtered_q_values"
  bottom: "target"
  top: "loss"
}
