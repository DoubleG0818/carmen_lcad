/* Auto-generated by genmsg_cpp for file /home/rcnascimento/ros/visual_search_thin/msg/test.msg */
#ifndef VISUAL_SEARCH_THIN_MESSAGE_TEST_H
#define VISUAL_SEARCH_THIN_MESSAGE_TEST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"
#include "sensor_msgs/Image.h"

namespace visual_search_thin
{
template <class ContainerAllocator>
struct test_ {
  typedef test_<ContainerAllocator> Type;

  test_()
  : associated_points_size(0)
  , associated_points()
  , associated_image_size(0)
  , associated_image()
  , scale(0.0)
  {
  }

  test_(const ContainerAllocator& _alloc)
  : associated_points_size(0)
  , associated_points(_alloc)
  , associated_image_size(0)
  , associated_image(_alloc)
  , scale(0.0)
  {
  }

  typedef int32_t _associated_points_size_type;
  int32_t associated_points_size;

  typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _associated_points_type;
  std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  associated_points;

  typedef int32_t _associated_image_size_type;
  int32_t associated_image_size;

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _associated_image_type;
   ::sensor_msgs::Image_<ContainerAllocator>  associated_image;

  typedef double _scale_type;
  double scale;


  typedef boost::shared_ptr< ::visual_search_thin::test_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visual_search_thin::test_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct test
typedef  ::visual_search_thin::test_<std::allocator<void> > test;

typedef boost::shared_ptr< ::visual_search_thin::test> testPtr;
typedef boost::shared_ptr< ::visual_search_thin::test const> testConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::visual_search_thin::test_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::visual_search_thin::test_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace visual_search_thin

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::visual_search_thin::test_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::visual_search_thin::test_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::visual_search_thin::test_<ContainerAllocator> > {
  static const char* value() 
  {
    return "19eef1dc77c172e3e5a0ff2cc6d1f3c3";
  }

  static const char* value(const  ::visual_search_thin::test_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x19eef1dc77c172e3ULL;
  static const uint64_t static_value2 = 0xe5a0ff2cc6d1f3c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::visual_search_thin::test_<ContainerAllocator> > {
  static const char* value() 
  {
    return "visual_search_thin/test";
  }

  static const char* value(const  ::visual_search_thin::test_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::visual_search_thin::test_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 associated_points_size\n\
#point[] associated_points\n\
geometry_msgs/Point[] associated_points\n\
int32 associated_image_size #input_image_width * input_image_height * 3 */\n\
sensor_msgs/Image associated_image\n\
float64 scale\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in src/image_encodings.cpp\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::visual_search_thin::test_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::visual_search_thin::test_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.associated_points_size);
    stream.next(m.associated_points);
    stream.next(m.associated_image_size);
    stream.next(m.associated_image);
    stream.next(m.scale);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct test_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visual_search_thin::test_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::visual_search_thin::test_<ContainerAllocator> & v) 
  {
    s << indent << "associated_points_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.associated_points_size);
    s << indent << "associated_points[]" << std::endl;
    for (size_t i = 0; i < v.associated_points.size(); ++i)
    {
      s << indent << "  associated_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.associated_points[i]);
    }
    s << indent << "associated_image_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.associated_image_size);
    s << indent << "associated_image: ";
s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.associated_image);
    s << indent << "scale: ";
    Printer<double>::stream(s, indent + "  ", v.scale);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VISUAL_SEARCH_THIN_MESSAGE_TEST_H

